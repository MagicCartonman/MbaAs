<!DOCTYPE html>
<html>
<head>
	<title>算法</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<body style="background:#CDB38B;margin-bottom:100px ">

<p>
    <strong>1.6 树与二叉树</strong>
</p>
<p>
    1.6.1 树的基本概念
</p>
<p>
    树是一种简单的非线性结构，直观地来看，树是以分支关系定义的层次结构。由于它呈现出与自然界的树类似的结构形式，所以称其为树。
</p>
<p>
    &nbsp; &nbsp; 例如，一个家族中的族谱关系如下：A有后代B、C；B有后代D、E、F；C有后代G；F有后代H、I。则这个家族的成员关系可用图1-21所示的一个倒置的树来描述。&nbsp;
</p>

<p>

   图1-21 树形结构&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T1-21.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    &nbsp; &nbsp; 在用图形表示数据结构中元素之间的前后件关系时，一般使用有向箭头。但在树形结构中，由于前后件关系非常清楚，即使去掉箭头也不会引起歧义，因此，图1-21中使用无向线段代表数据元素之间的逻辑关系（即前后件关系）。
</p>
<p>
    &nbsp; &nbsp; 在现实世界中，能用树这种数据结构表示的例子有很多，如组织机构（如局、处、科）、行政区（国家、省、市、县）和书籍目录（书、章、节、小节）等。
</p>
<p>
    &nbsp; &nbsp; 下面结合图1-21介绍树的相关术语。
</p>
<p>
    &nbsp; &nbsp; 父结点：在树结构中，每一个结点只有一个前件，称为父结点，没有前件的结点只有一个，称为树的根结点，简称树的根。例如，在图1-21中，结点A是树的根结点。
</p>
<p>
    &nbsp; &nbsp; 子结点和叶子结点：在树结构中，每一个结点可以有多个后件，称为该结点的子结点。没有后件的结点称为叶子结点。例如，在图1-21中，结点D、H、I、F、G均为叶子结点。
</p>
<p>
    &nbsp; &nbsp; 度：在树结构中，一个结点所拥有的后件个数称为该结点的度，所有结点中最大的度称为树的度。例如，在图1-21中，根结点A和结点E的度为2，结点B的度为3，结点C的度为1，叶子结点D、H、I、F的度为0。因此，该树的度为3。
</p>
<p>
    &nbsp; &nbsp; 深度：定义一棵树的根结点所在的层次为1，其他结点所在的层次等于它的父结点所在的层次加1。树的最大层次称为树的深度。例如，在图1-21中，根结点A在第1层，结点B、C在第2层，结点D、E、F、G在第3层，结点H、I在第4层。该树的深度为4。
</p>
<p>
    &nbsp; &nbsp; 子树：在树中，以某结点的一个子结点为根构成的树称为该结点的一棵子树。例如，在图1-21中，结点A有2棵子树，它们分别以B、C为根节点。结点B有3棵子树，它们分别以D、E、F为根节点，其中，以D、F为根节点的子树实际上只有根节点一个结点。树的叶子结点度数为0，所以没有子树。
</p>
<p>
    &nbsp; &nbsp; 若将树中任意结点的子树均看成是从左到右有次序的，不能随意交换，则称该树是有序树，否则称为无序树。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    1.6.2 二叉树及其基本性质
</p>
<p>
    1.二叉树的定义
</p>
<p>
    &nbsp; &nbsp; 二叉树是一种很有用的非线性结构，它不同于前面介绍的树结构，但它与树结构很相似，并且树结构的所有术语都可以用到二叉树这种数据结构上。
</p>
<p>
    &nbsp; &nbsp; 二叉树是一个有限的结点集合，该集合或者为空，或者由一个根结点及其两棵互不相交的左、右二叉子树所组成，如图1-22所示。&nbsp;
</p>

<p>


    <br> <br>
    图1-22 二叉树示例&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T1-22.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; 二叉树具有以下特点：
</p>
<p>
    &nbsp; （1）二叉树可以为空，空的二叉树没有结点，非空二叉树有且只有一个根结点。
</p>
<p>
    &nbsp; （2）每个结点最多有两棵子树，且分别称为该结点的左子树与右子树。
</p>
<p>
    &nbsp; （3）二叉树的子树有左右之分，其次序不能任意颠倒。
</p>
<p>
    &nbsp; &nbsp; 在二叉树中，每个结点的度最大为2，所有的左子树和右子树也均是二叉树。同时，在二叉树中，一个结点可以只有左子树而没有右子树，也可以只有右子树而没有左子树。当一个结点既没有左子树也没有右子树时，该结点即是叶子结点。
</p>
<p>
    2满二叉树和完全二叉树
</p>
<p>
    &nbsp; &nbsp; 满二叉树和完全二叉树是两种特殊形态的二叉树。
</p>
<p>
    （1）满二叉树
</p>
<p>
    &nbsp; &nbsp; 满二叉树指除最后一层外，每一层上的所有结点都有两个子结点的二叉树。即满二叉树在其第i层上有2 i-1个结点，即每一层上的结点数都是最大结点数，且深度为K的满二叉树共有2K-1个结点。
</p>
<p>
    &nbsp; &nbsp; 图1-23（a）、（b）所示分别是深度3和4的满二叉树。&nbsp;

</p>

<p>
    
          <br> <br>
  &nbsp; &nbsp;图1-23 满二叉树&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T1-23.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; 在满二叉树中，只有度为2和度为0的结点，没有度为1的结点。所有度为0的结点即叶子结点都在同一层，即最后一层。
</p>
<p>
    （2）完全二叉树
</p>
<p>
    &nbsp; &nbsp; 完全二叉树指除最后一层外，每一层上的结点数均达到最大值，在最后一层上只缺少右边的若干结点。
</p>
<p>
    &nbsp; &nbsp; 完全二叉树也可以这样来描述：如果对满二叉树的结点进行连续编号，从根结点开始，对二叉树的结点自上而下，自左至右用自然数进行连续编号，则深度为K的有n个结点的二叉树，当且仅当其每一个结点都与深度为K的满二叉树中编号从1到n的结点一一对应时，称之完全二叉树。
</p>
<p>
    图1-24（a）所示为深度为3的3棵完全二叉树，图1-24（b）所示为深度为4的一棵完全二叉树。&nbsp;
</p>

<p>
   
          <br> <br>
  图1-24 完全二叉树&nbsp;

    <img src="file:///android_asset/local_html/local_imgs/T1-24.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    &nbsp; &nbsp; 对于完全二叉树来说，叶子结点只可能在层次最大的两层上出现；对于任何一个结点，若其右分支下的子孙结点的最大层次为m，则其左分支下的子孙结点的最大层次或为m或为m+1。
</p>
<p>
    说明：由满二叉树与完全二叉树的特点可以看出，满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。
</p>
<p>
    3.二叉树的基本性质
</p>
<p>
    &nbsp; &nbsp; &nbsp;二叉树具有下列重要性质：
</p>
<p>
    &nbsp; &nbsp; 性质1：在二叉树的第K层上，最多有2 K-1（K≥1）个结点。
</p>
<p>
    &nbsp; &nbsp; 例如，二叉树的第1层最多有20=1个结点，第3层最多有23-1=22=4个结点。
</p>
<p>
    &nbsp; &nbsp; 性质2：深度为K的二叉树中，最多有2K -1个结点。
</p>
<p>
    &nbsp; &nbsp; 深度为K的二叉树是指二叉树共有K层。由性质1可知，深度为K的二叉树中，最大结点个数M为：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; M=21-1+22-1+…+2k-1=2k-1
</p>
<p>
    &nbsp; &nbsp; 例如，深度为3的二叉树，最多有结点23-1=7个结点。
</p>
<p>
    &nbsp; &nbsp; 性质3：对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。
</p>
<p>
    &nbsp; &nbsp; 证明：设一棵非空二叉树中有n个结点，叶子结点个数为n0，度为1的结点个数为n1，度为2的结点个数为n2。
</p>
<p>
    所以：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;n=n0＋n1＋n2 &nbsp; &nbsp; &nbsp; &nbsp; （1）
</p>
<p>
    &nbsp; &nbsp; 在二叉树中，除根结点外，其余每个结点都有且仅有一个前件（直接前驱）和一条从
</p>
<p>
    &nbsp; &nbsp; 其前件结点指向它的边。假设边的总数为B，则二叉树中总的结点数为：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;n＝B＋1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; （2）
</p>
<p>
    &nbsp; &nbsp; 由于二叉树中的边都是由度为1和度为2的结点发出的。所以有：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B=n1＋n2×2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（3）
</p>
<p>
    &nbsp; &nbsp; &nbsp;综合（1）、（2）、（3）式，可得：n0=n2 +1
</p>
<p>
    &nbsp; &nbsp; 例如，图1-22的二叉树中，叶子结点为3个，度为2的结点有2个。图1-23（a）的二叉树中，度为2的结点有3个，叶子结点有4个。
</p>
<p>
    &nbsp; &nbsp; 性质4：具有n个结点的二叉树，其深度至少为［log2n］+1，其中［log2n］表示取log2n的整数部分。
</p>
<p>
    &nbsp; &nbsp; 例如，有6个结点的二叉树中，其深度至少为［log26］+1=2+1=3。
</p>
<p>
    &nbsp; &nbsp; 性质5：具有n个结点的完全二叉树的深度为［log2n］+1。
</p>
<p>
    &nbsp; &nbsp; 例如，图1-24（a）中的三棵二叉树，结点数为7的二叉树深度为［log27］+1=2+1=3。结点数为5的二叉树深度为［log25］+1=2+1=3。结点数为4的二叉树深度为［log24］+1=2+1=3。
</p>
<p>
    &nbsp; &nbsp; 性质6：设完全二叉树共有n个结点。如果从根结点开始，按层序（每一层从左到右）用自然数1，2，…，n给结点进行编号（i=1，2，…，n），有以下结论。
</p>
<p>
    &nbsp; &nbsp; &nbsp;①若i=1，则该结点为根结点，它没有父结点；若i&gt;1，则该结点的父结点编号为［i/2］；其中［i /2］表示取i/2的整数部分。
</p>
<p>
    &nbsp; &nbsp; ② 若2i&gt;n，该结点无左子结点（也无右子结点）；若2i≤n，则编号为i的结点的左子结点编号为2i。
</p>
<p>
    &nbsp; &nbsp; ③ 若2i+1&gt;n，则该结点无右子结点；若2i+1≤n，则编号为i的结点的右子结点编号为2i+1。
</p>
<p>
    &nbsp; &nbsp; 例如：在图1-24（b）中，对于5号结点，i=5，父结点编号为［i/2］＝［5/2］＝2；因为2i≤n，即2×5＝10≤11，所以5号结点有左子结点，编号为2i＝10；因为2i+1≤n，即2×5+1＝11，所以5号结点有右子结点，编号为2i+1＝11。
</p>
<p>
    &nbsp; &nbsp; 说明：性质5和性质6是完全二叉树和满二叉树特有的。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    1.6.3 二叉树的存储结构
</p>
<p>
    在计算机中，二叉树通常采用链式存储结构。用于存储二叉树中元素的存储结点由数据域和指针域两部分构成。由于每一个元素可以有两个后件，所以用于存储二叉树的存储结点的指针域有两个：一个用于指向该结点的左子结点，即左指针域；另一个用于指向该结点的
</p>
<p>
    右子结点，即右指针域。二叉树的存储结点如图1-25所示。&nbsp;
</p>

<p>
 
     <br> <br>
   图1-25 二叉树的一个存储结点&nbsp;

    <img src="file:///android_asset/local_html/local_imgs/T1-25.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; 由于二叉树的存储结构中每一个存储结点有两个指针域，因此，二叉树的链式存储结构也称为二叉链表。
</p>
<p>
    &nbsp; &nbsp; 对于满二叉树与完全二叉树可以按层次进行顺序存储。&nbsp;
</p>

<p>
    1.6.4 二叉树的遍历
</p>
<p>
    二叉树的遍历是指不重复地访问二叉树中的所有结点。
</p>
<p>
    &nbsp; &nbsp; 由于二叉树是非线性结构，在遍历二叉树的过程中，当访问到某个结点时，再往下访问可能有两个分支，那么先访问哪个分支呢？对于二叉树来说，根结点、左子树上的所有结点和右子树上的所有结点，究竟先访问哪一个呢？
</p>
<p>
    &nbsp; &nbsp; 在遍历二叉树的过程中，一般先遍历左子树，再遍历右子树。在先左后右的原则下，根据访问根结点的次序不同，二叉树的遍历分为3种：前序遍历、中序遍历、后序遍历。
</p>
<p>
    1.前序遍历（DLR）
</p>
<p>
    &nbsp; &nbsp; 前序遍历是指在访问根结点、遍历左子树与遍历右子树三者中，首先访问根结点，然后遍历左子树，最后遍历右子树；并且在遍历左子树和右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树。
</p>
<p>
    &nbsp; &nbsp; &nbsp;前序遍历可以描述为：若二叉树为空，则结束返回。否则：
</p>
<p>
    &nbsp; &nbsp; ① 访问根结点。
</p>
<p>
    &nbsp; &nbsp; ② 前序遍历左子树。
</p>
<p>
    &nbsp; &nbsp; ③ 前序遍历右子树。
</p>
<p>
    &nbsp; &nbsp; 例如，对图1-26中的二叉树进行前序遍历的结果为A，B，D，H，E，I，C，F，G（称为该二叉树的前序序列）。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
  

     <br> <br>
     &nbsp;图1-26 一颗二叉树&nbsp;

    <img src="file:///android_asset/local_html/local_imgs/T1-26.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    2.中序遍历（LDR）&nbsp;
</p>
<p>
    &nbsp; &nbsp; 中序遍历是指在访问根结点、遍历左子树与遍历右子树三者中，首先遍历左子树，然后访问根结点，最后遍历右子树；并且在遍历左子树和右子树时，仍然先遍历左子树，然后访问根结点，最后遍历右子树。
</p>
<p>
    &nbsp; &nbsp; 中序遍历可以描述为：若二叉树为空，则结束返回。否则：
</p>
<p>
    &nbsp; &nbsp; ① 中序遍历左子树。
</p>
<p>
    &nbsp; &nbsp; ② 访问根结点。
</p>
<p>
    &nbsp; &nbsp; ③ 中序遍历右子树。
</p>
<p>
    &nbsp; &nbsp; 例如，对图1-26中的二叉树进行中序遍历的结果为H，D，B，E，I，A，C，G，F（称为该二叉树的中序序列）。
</p>
<p>
    3.后序遍历（LRD）
</p>
<p>
    &nbsp; &nbsp; 后序遍历是指在访问根结点、遍历左子树与遍历右子树三者中，首先遍历左子树，然后遍历右子树，最后访问根结点；并且在遍历左子树和右子树时，仍然先遍历左子树，然后遍历右子树，最后访问根结点。
</p>
<p>
    &nbsp; &nbsp; 后序遍历可以描述为：若二叉树为空，则结束返回。否则：
</p>
<p>
    &nbsp; &nbsp; ① 后序遍历左子树。
</p>
<p>
    &nbsp; &nbsp; ② 后序遍历右子树。
</p>
<p>
    &nbsp; &nbsp; ③ 访问根结点。
</p>
<p>
    &nbsp; &nbsp; 例如，对图1-26中的二叉树进行后序遍历的结果为H，D，I，E，B，G，F，C，A（称为该二叉树的后序序列）。
</p>
<p>
    说明：已知一棵二叉树的前序遍历序列和中序遍历序列，可以唯一确定这棵二叉树。已知一棵二叉树的后续遍历序列和中序便利序列，也可以唯一确定这棵二叉树。但是，已知一棵二叉树的前序遍历序列和后序遍历序列，不能唯一确定这棵二叉树。&nbsp;
</p>
<p>
    <br/>
</p>
</body>
</html>





   

