<!DOCTYPE html>
<html>
<head>
	<title>算法</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<body style="background:#CDB38B; ">
	<h1>第1章 数据结构与算法</h1>
	<h2>1.2 数据结构的基本概念</h2>
	<h3>1.2.1 什么是数据结构</h3>
	<p>算法是指对解题方案准确而完整的描述。简单地说，算法就是解决问题的操作步骤。计算机程序本质上就是一个算法，它告诉计算机确切的步骤来执行一个指定的任务。
但是，算法不等于程序，也不等于数学上的计算方法。在用计算机解决实际问题时，往往先设计算法，用某种表达方式（如流程图）描述，然后再用具体的程序设计语言描述此算法（即编程）。但在编程时由于要受到计算机系统运行环境等的限制，所以程序的编制不可能优于算法的设计。</p>
	<h4>1.算法的基本特征</h4>
	<small>一个算法一般应具有以下几个基本特征。</small>
	<p>（1）可行性<br>
可行性是指算法在特定的执行环境中执行应当能够得出满意的结果，保证每一个步骤必须能够实现，保证结果要能够达到预期的目的。一个算法，即使在数学理论上是正确的，但如果在实际的计算工具上不能执行，则该算法也是不具有可行性的。
例如，一栋楼地上有10层，地下有负1层，该建筑的电梯只设有1到10层的而没有到负1层的电梯，我们乘电梯从1楼到5楼是可行的，从1楼到负1楼则是不可行的。<br>
（2）确定性<br>
算法的确定性表现在对算法中每一步的描述都是明确的，不允许有模棱两可的解释，也不允许有多义性，只要输入相同，初始状态相同，则无论执行多少遍，所得的结果都应该相同。如果算法的某个步骤有多义性，则该算法将无法执行。<br>
例如，开车到了十字路口需要转弯时就要明确给出“左转”或“右转”的指令，而不是“转弯”这种没有明确方向的指令。<br>
（3）有穷性<br>
算法的有穷性是指算法能够在有限时间内完成，即执行有限步骤后能够终止。这其中也包括了合理的执行时间，如果一个算法执行需要耗费千万年，那么即使最终得出了正确结果，也失去了实际意义。
例如，数学中的无穷级数，其表示只是一个计算公式，当n趋向于无穷大时，这将会是是无终止的过程，这样的算法是没有意义的。<br>
（4）拥有足够的情报<br>
一般来说，算法在拥有足够的输入信息和初始化信息时，才是有效的；当提供的情报不够时，算法可能无效。例如，a=3，b=5，求a+b+c的值，显然由于对c没有进行初始化，无法计算出正确的答案。
在特殊情况下，算法也可以没有输入。因此，一个算法有零个或多个输入。<br>
综上所述，算法是一个动态的概念，是一组严谨地定义运算顺序或操作步骤的规则，并且每一个规则都是有效的、明确的、能够在有限次执行后终止的。</p>

<h4>2.算法的基本要素</h4>
<small>一个算法通常由两种基本要素组成：一是对数据对象的运算和操作；二是算法的控制结构，即运算或操作间的顺序。
</small>
<p>（1）算法中对数据对象的运算和操作<br>
算法主要是指计算机算法。计算机算法就是计算机能执行的操作所组成的指令序列。不同的计算机系统，指令系统是有差异的，但一般的计算机系统中，都包括包括4类基本运算和操作：算术运算、逻辑运算、关系运算和数据传输，如表1-1所示。<br>

        &nbsp; &nbsp; &nbsp; &nbsp;表1-1  <br>
    <img src="file:///android_asset/local_html/local_imgs/B1-1.jpg" style="width:100%;border-radius: 10px;">
（2）算法的控制结构<br>
一个算法所实现的功能不仅与其选用的操作有关，还与各个操作步骤之间的执行顺序有关。算法中各操作步骤之间的执行顺序称为算法的控制结构。算法一般是由顺序、选择（又称分支）和循环（又称重复）3种基本结构组合而成。<br>
描述算的的工具有传统流程图、N-S结构化流程图和算法描述语言等。</p>
<h4>3.算法设计的基本方法</h4>
<small>算法设计的基本方法有列举法、归纳法、递推法、递归法、减半递推技术和回溯法等。</small>
<p>（1）列举法<br>
列举法是指针对待解决的问题，列举所有可能的情况，并用问题中给定的条件来检验哪些是必须的，哪些是不需要的。其特点是原理比较简单，只能适用于存在的可能比较少的问题。例如，汽车行经十字路口，只有左拐、右拐、直行或调头4种可能情况。<br>
（2）归纳法<br>
归纳法是从特殊到一般的抽象过程。通过分析少量的特殊情况，从而找出一般的关系。归纳法比列举法更能反映问题的本质，并且可以解决无限列举量的情况，但是归纳法不容易实现。<br>
（3）递推法<br>
递推法本质上也属于归纳法，不过它是指从已知的初始条件出发，逐次推出所要求的各中间结果和最后结果，就是一步一步的归纳。<br>
（4）减半递推法<br>
“减半”是指在不改变问题性质的前提下，将问题的规模减半；而“递推”则是不断重复减半的过程。<br>
（5）递归法<br>
递归法就是将一个复杂的问题逐层分解成若干个简单的问题，直接解决这些简单问题后，再按原来分解的层次逐层向上，把简单的问题综合以解决复杂的问题。<br>
（6）回溯法<br>
回溯法就是把一个问题逐层分析，从上到下逐步去“试”，若成功，则得到问题的解；若失败，就逐步退回，换个路线再行试探，直到彻底解决问题。</p>


<h3>1.1.2 算法复杂度</h3>
<small>一个算法的复杂度高低体现在运行该算法所需要的计算机资源的多少，所需的资源越多，就说明该算法的复杂度越高；反之，所需的资源越少，则该算法的复杂度越低。
算法复杂度包括算法的时间复杂度和算法的空间复杂度。</small>
<h4>1.算法的时间复杂度</h4>
<small>算法的时间复杂度是指执行算法所需要的计算工作量。</small>
<p>值得注意的是：算法程序执行的具体时间和算法的时间复杂度并不是一致的。算法程序执行的具体时间受到所使用的计算机、程序设计语言以及算法实现过程中的许多细节所影响。而算法的时间复杂度与这些因素无关。</p>
<p>算法的计算工作量是用算法所执行的基本运算次数来度量的，而算法所执行的基本运算次数是问题规模（通常用整数n表示）的函数，即：<br>
算法的工作量＝f（n）<br>
其中n为问题的规模。<br>
所谓问题的规模就是问题的计算量的大小。例如，1+2，这是规模比较小的问题，但1+2+3+…+n，这个问题的计算规模就将随着n的取值的变化而变化。<br>
通常情况下，可以用以下两种方法来分析算法的工作量。<br>
（1）平均性态：平均性态是指用各种特定输入下的基本运算次数的加权平均值来度量算法的工作量。<br>
（2）最坏情况：最坏情况是指执行算法的基本运算的次数最多的情况。在设计算法时，最坏的情况一定要认真全免的考虑，才能最大限度地预防问题的出现。</p>

<h4>2.算法的空间复杂度</h4>
<small>算法的空间复杂度是指执行这个算法所需要的内存空间。</small>
<p>算法执行期间所需的存储空间包括3个部分：<br>
（1）输入数据所占的存储空间；<br>
（2）程序本身所占的存储空间；<br>
（3）算法执行过程中所需要的额外空间。<br>
其中，额外空间包括算法程序执行过程中的工作单元，以及某种数据结构所需要的附加存储空间。
如果额外空间量相对于问题规模（即输入数据所占的存储空间）来说是常数，即额外空间量不随问题规模的变化而变化，则称该算法是原地（in place）工作的。
为了降低算法的空间复杂度，主要应减少输入数据所占的存储空间以及额外空间，通常采用压缩存储技术。
算法的空间复杂度和时间复杂度是相互独立的两个概念，它们之间没有直接或间接的关系。</p>



</body>
</html>



数据结构研究的内容主要包括3个方面：
    ●数据集合中各数据元素之间所固有的逻辑关系，即数据的逻辑结构；
    ●在对数据进行处理时，各数据元素在计算机中的存储关系，即数据的存储结构；
    ●对各种数据结构进行的运算。
  1.2.1  什么是数据结构?
    数据结构是指相互有关联的数据元素的集合。而数据元素具有广泛含义，一般来说，现实世界中客观存在的一切个体都可以是数据元素，它可以是一个数字或一个字符，也可以是一个具体的事物，或者其他更复杂的信息。例如，描述一年四季的季节名——春、夏、秋、冬，可以作为季节的数据元素；表示家庭成员的各成员名——父亲、儿子、女儿，可以作为家庭成员的数据元素。
   数据结构包含两个要素，即“数据”和“结构”。
   数据，是需要处理的数据元素的集合，一般来说，这些数据元素，具有某个共同的特征。
   例如，东、南、西、北这4个数据元素都有一个共同的特征，它们都是地理方向名，分别表示二维地理空间中的4个方向，这4个数据元素构成了地理方向名的集合。
   又例如，早餐、午餐、晚餐这3个数据元素也有一个共同的特征，即它们都是一日三餐的名称，从而构成了一日三餐名的集合。
   结构，就是关系，是集合中各个数据元素之间存在的某种关系（或联系）。
  “结构”是数据结构研究的重点。数据元素根据其之间的不同特性关系，通常可以分为以下4类：线性结构（图1-1（a））、树形结构（图1-1（b））、网状结构（图1-1（c））和集合（图1-1（d））。
[图片]
图1-1 四类基本结构
     在数据处理领域中，通常把两两数据元素之间的关系用前后件关系（或直接前驱与直接后继关系）来描述。
     例如，在考虑一日三餐的时间顺序关系时，“早餐”是“午餐”的前件（或直接前驱），而“午餐”是“早餐”的后件（或直接后继）；同样，“午餐”是“晚餐”的前件，“晚餐”是“午餐”的后件。
     又例如，在考虑军队中的上下级关系时，“连长”是“排长”的前件，“排长”是“连长”的后件，“排长”是“班长”的前件，“班长”是“排长”的后件，同样的，“班长”是“战士”的前件，“战士”是“班长”的后件。
    前后件关系是数据元素之间最基本的关系，但前后件关系所表示的实际意义随具体对象的不同而不同。一般来说，数据元素之间的任何关系都可以用前后件关系来描述。
1.数据的逻辑结构
    数据的逻辑结构，指反映数据元素之间逻辑关系（即前后件关系）的数据结构。
    数据的逻辑结构有两个要素：一个是数据元素的集合，通常记为D；另一个是D上的关系，它反映了D中各数据元素之间的前后件关系，通常记为R。即一个数据结构可以表示成：
           B=（D,R）
    其中，B表示数据结构。为了反映D中各数据元素之间的前后件关系，一般用二元组来表示。例如，假设a与b是D中的两个数据，则二元组（a,b）表示a是b的前件，b是a的后件。这样，在D中的每两个元素之间的关系都可以用这种二元组来表示。
    例如，如果把一日三餐看作一个数据结构，则可表示成
           B=（D,R）
           D={早餐，午餐，晚餐}
           R={（早餐，午餐）,（午餐，晚餐）}
    又例如，部队军职的数据结构，可表示成
           B=（D，R）
           D={连长，排长，班长，战士}
           R={（连长，排长）,（排长，班长），（班长，战士）}
    再例如，家庭成员数据结构，可表示成
           B=（D，R）
           D={父亲，儿子，女儿}
           R={（父亲，儿子）,（父亲，女儿）}
2.数据的存储结构
    数据的存储结构，又称为数据的物理结构，是数据的逻辑结构在计算机存储空间中的存放方式。由于数据元素在计算机存储空间中的位置关系可能与逻辑关系不同，因此，为了表示存储在计算机存储空间中的各数据之间的逻辑关系（即前后件关系），在数据的存储结构中，不仅要存放各数据元素的信息，还需要存入各数据元素之间的前后件关系的信息。
    各数据元素在计算机存储空间中的位置关系与它们的逻辑关系不一定是相同的。
    例如，在前面提到的一日三餐的数据结构中，“早餐”是“午餐”的前件，“午餐”是“早餐”的后件，但在对它们进行处理时，在计算机存储空间中，“早餐”这个数据元素的信息不一定被存储在“午餐”这个数据元素信息的前面，可能在后面，也可能不是紧邻在前面，而是中间被其他的信息所隔开。
    一般来说，一种数据的逻辑结构根据需要可以表示成多种存储结构，常用的存储结构有顺序、链接、索引等存储结构。采用不同的存储结构，其数据处理的效率是不同的。因此，在进行数据处理时，选择合适的存储结构是很重要的。
1.2.2 数据结构的图形表示
一个数据结构除了用二元关系表示外，还可以用图形来表示。用中间标有元素值的方框表示数据元素，此方框一般称之为数据结点，简称为结点。对于每一个二元组，用一条有向线段从前件指向后件。
    例如，一日三餐的数据结构可以用如图1-2（a）所示的图形来表示。
    又例如，军职数据结构可以用如图1-2（b）所示的图形来表示。
[图片]
     用图形表示数据结构具有直观易懂的特点，在不引起歧义的情况下，前件结点到后件结点连线上的箭头可以省去。例如，树形结构中，通常都是用无向线段来表示前后件关系的。
     由前后件关系还可引出以下3个基本概念，见表1-2。
表1-2 结点基本概念
[图片]
1.2.3 线性结构与非线性结构
如果一个数据结构中没有数据元素，则称该数据结构为空的数据结构。在一个空的数据结构中插入一个新的元素后就变为非空；在只有一个数据元素的数据结构中，删除该数据元素，就得到一个空的数据结构。
根据数据结构中各数据元素之间前后件关系的复杂程度，一般将数据结构划分为两大类型：线性结构和非线性结构，见表1-3。
表1-3 线性结构与非线性结构
[图片]说明：在一个线性结构中插入或删除任何一个结点后还应是线性结构；线性结构和非线性结构在删除结构中的所有结点后，都会产生空的数据结构。一个空的数据结构究竟是属于线性结构还是属于非线性结构，这要根据具体情况来确定。如果对该数据结构的算法是按线性结构的规则来处理的，则属于线性结构；否则属于非线性结构。