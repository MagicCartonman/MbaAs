<!DOCTYPE html>
<html>
<head>
	<title>算法</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<body style="background:#CDB38B;margin-bottom:100px ">
<p>
    <strong>第2章 程序设计基础</strong>
</p>
<p>
    <br/>
</p>
<p style="text-align: center;">
    2.1 程序设计方法与风格
</p>
<p>
    2.1.1 程序设计方法与风格
</p>
<p>
    程序设计是指设计、编制、调试程序的方法和过程。程序是一组计算机指令的集合，是程序设计的最终成果，一个程序的质量除了受到程序设计的方法影响外，和程序设计风格有关。程序设计风格是指编写程序时所表现出的特点、习惯和逻辑思路。
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; 良好的程序设计风格可以使程序结构清晰合理，程序代码便于维护，因此，程序设计风格深深地影响着软件的质量和维护。总体而言，程序设计风格应该强调简单和清晰，程序必须是可以理解的。“清晰第一，效率第二”的论点已经成为当今主导的程序设计风格。
</p>
<p>
    1.源程序文档化
</p>
<p>
    &nbsp; &nbsp; 源程序文档化是指在源程序中可包含一些内部文档，以帮助阅读和理解源程序。
</p>
<p>
    &nbsp; &nbsp; 源程序文档化应考虑以下几点：符号名的命名、程序注释和视觉组织。
</p>
<p>
    &nbsp; &nbsp; 例如：
</p>
<p>
    &nbsp; &nbsp; /*1 编写程序实现交换两个数的值。*/
</p>
<p>
    &nbsp; &nbsp; void main()
</p>
<p>
    &nbsp; &nbsp; {
</p>
<p>
    &nbsp; &nbsp; int num1,num2 ,temp;
</p>
<p>
    &nbsp; &nbsp; scanf(“%d,%d”,&amp;num1,&amp;num2); &nbsp; /*2 从键盘输入待交换的两个整型数值 */
</p>
<p>
    &nbsp; &nbsp; printf(“交换之前num1=%d,num2=%d\n”,num1,num2);&nbsp;
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; temp=num1;&nbsp;
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; num1=num2;&nbsp;
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; num2=temp;&nbsp;
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/*3 输出交换前变量num1和num2的值 */
</p>
<p>
    &nbsp; &nbsp; printf(“交换之后num1=%d,num2=%d\n”,num1,num2);&nbsp;
</p>
<p>
    &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/*4 输出交换后变量num1和num2的值 */
</p>
<p>
    &nbsp; （1）符号名的命名：符号名的命名应具有一定的实际含义，以便于对程序功能的理解。如上面的程序段中，用“num1”和“num2”作为变量名，使我们容易理解这是两个数值。“temp”作为变量名，使我们容易理解这是用于交换的中间变量。
</p>
<p>
    &nbsp; （2）程序注释：在源程序中添加正确的注释可帮助读者理解程序。程序注释可分为序言性注释和功能性注释。
</p>
<p>
    &nbsp; &nbsp; ●序言性注释位于程序的起始部分，说明整个程序模块的功能。它主要描述：程序标题、功能说明、主要的算法、模块接口、开发历史，包括程序设计者、复审者和复审日期、修改日期以及对修改的描述。
</p>
<p>
    如上面的程序段中的第1注释语句。
</p>
<p>
    &nbsp; &nbsp; ●功能性注释一般嵌套在源程序体内，主要描述相关语句或程序段的功能。
</p>
<p>
    如上面的程序段中的第2、3和4条注释语句。
</p>
<p>
    &nbsp; （3）视觉组织：通过在程序中添加一些空格、空行和缩进等，使程序层次分明、结构清晰。
</p>
<p>
    2.数据说明的方法
</p>
<p>
    &nbsp; &nbsp; 为使程序中的数据说明易于理解和维护，编写程序时，应注意以下几点:
</p>
<p>
    &nbsp; &nbsp;（1）次序应规范化。数据说明次序固定，使数据的属性易于查找，这样也利于程序的测试、排错和维护。
</p>
<p>
    &nbsp; &nbsp;（2）变量安排有序化。当多个变量出现在同一个说明语句中时，变量名应按字母顺序排序，以便于查找。
</p>
<p>
    &nbsp; &nbsp;（3）合理使用注释。在定义一个复杂的数据结构时，应通过注释来说明该数据结构的特点。
</p>
<p>
    3.语句的结构
</p>
<p>
    &nbsp; &nbsp; 使用构造简单的语句，让程序简单易懂，不能为了提高效率而把语句复杂化。在编写程序时，一般需注意以下几点：
</p>
<p>
    &nbsp; （1）应优先考虑清晰性，不要在同一行内写多个语句；
</p>
<p>
    &nbsp; （2）首先要保证程序正确，然后再要求提高速度；
</p>
<p>
    &nbsp; （3）尽可能使用库函数；
</p>
<p>
    &nbsp; （4）避免采用复杂的条件语句；
</p>
<p>
    &nbsp; （5）利用信息隐蔽，保证每一个模块的独立性；
</p>
<p>
    &nbsp; （6）要模块化，模块功能尽可能单一，即一个模块完成一个功能；
</p>
<p>
    &nbsp; （7）不要修补不好的程序，要重新编写，尽可能避免因修补带来的新问题。
</p>
<p>
    4.输入和输出
</p>
<p>
    &nbsp; &nbsp; 输入和输出信息是用户直接关心的，系统能否被用户接受，往往取决于输入和输出的风格。输入和输出的方式和格式要尽量方便用户使用，无论是批处理，还是交互式的输入和输出，都应考虑下列原则：
</p>
<p>
    &nbsp; （1）对所有的输入数据都要检验数据的合法性；
</p>
<p>
    &nbsp; （2）检查输入项之间的合理性；
</p>
<p>
    &nbsp; （3）输入一批数据后，最好使用输入结束标志；
</p>
<p>
    &nbsp; （4）在采用交互式输入/输出方式进行输入时，在屏幕上使用提示符明确提示输入的请求，同时在数据输入过程中和输入结束时，应在屏幕上给出状态信息；
</p>
<p>
    &nbsp; （5） 当程序设计语言对输入格式有严格要求时，应保持输入格式与输入语句的一致性；
</p>
<p>
    &nbsp; （6）给所有的输出加注释，并设计良好的输出报表格式。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p style="text-align: center;">
    <strong>2.2 结构化程序设计</strong>
</p>
<p>
    2.2.1 结构化程序设计方法的原则
</p>
<p>
    软件危机的出现促使人们去研究程序设计方法，其中最受关注的方法是结构化程序设计方法，其核心是模块化。它引入了工程思想和结构化思想，使大型软件的开发和编制都得到了极大的改善。
</p>
<p>
    &nbsp; &nbsp; 结构化程序设计方法的重要原则是自顶向下、逐步求精、模块化及限制使用goto语句。
</p>
<p>
    1.自顶向下
</p>
<p>
    &nbsp; &nbsp; 程序设计时，应先考虑总体，后考虑细节；先从最上层总体目标开始设计，再逐步使问题具体化。
</p>
<p>
    &nbsp; &nbsp; 例如，需要对｛12，3，7，11，15，1，22｝这样一组数进行排序，那么首先要做的是，明确待排序数组最终需要的是正序序列，还是逆序序列，然后再选择合适的排序方法，完成数组的排序。
</p>
<p>
    2.逐步求精&nbsp;
</p>
<p>
    &nbsp; &nbsp; 对复杂问题，应设计一些子目标做过渡，逐步细化。
</p>
<p>
    &nbsp; &nbsp; 例如，需要对｛12，3，7，11，15，1，22｝这样一组数进行排序，在明确需要排列成正序序列之后，选择了冒泡排序方法完成排序。那么此时就可惜细化冒泡排序的实现过程，比如选择循环结构，再细化下去，可以确定需要的是一个嵌套循环。就这样一层一层细化，直指问题最终被解决。
</p>
<p>
    3.模块化
</p>
<p>
    &nbsp; &nbsp; 一个复杂的问题是由若干个简单的问题构成的，模块化就是把程序要解决的总目标分解为分目标，再进一步分解为具体的小目标，把每个小目标称为一个模块。
</p>
<p>
    &nbsp; &nbsp; 例如，设计学生信息管理的程序，通过分析，该程序可以分解成为学生信息录入、查询、修改和删除四个部分，且每个部分在功能上相对独立，这样我们就把这个大问题分解成为四个相互独立的小问题来逐个解决，这就是模块化编程思想的初步。
</p>
<p>
    4.限制使用goto语句
</p>
<p>
    &nbsp; &nbsp; 针对程序中大量地使用goto语句，导致程序结构混乱的现象，E. W. Dijkstra于1965年提出在程序语言中取消goto语句，从而引起了对goto语句的争论。这一争论一直持续到20世纪70年代初，最后的结论是：
</p>
<p>
    &nbsp; （1）滥用goto语句确实有害，应尽量避免；
</p>
<p>
    &nbsp; （2）完全避免使用goto语句也并非是明智的方法，有些地方使用goto语句，会使程序的可读性和效率更高；
</p>
<p>
    &nbsp; （3）争论的焦点不应该放在是否取消goto语句，而应该放在用什么样的结构上。
</p>
<p>
    <br/>
</p>
<p>
    2.2.2 结构化程序的基本结构与特点
</p>
<p>
    结构化程序设计方法是一种程序设计的先进方法。事实证明，在程序设计时，只要使用3种程序结构就可以实现所有的结构形式，它们是顺序结构、选择结构和循环结构。它们的共同特征是：严格地只有一个入口和一个出口；结构内的每一部分都有机会被执行；不存在“死循环”。
</p>
<p>
    1.顺序结构
</p>
<p>
    &nbsp; &nbsp; 顺序结构是指按照程序语句行的先后顺序，自始至终一条语句一条语句地顺序执行，它是最简单也是最常用的基本结构。如图2-1所示，虚线框内就是一个顺序结构，没有分支，也没有转移和重复。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
   
     &nbsp;图2-1 顺序结构&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T2-1.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    例如：输入三角形的三边长，求三角形的面积
</p>
<p>
    void main()
</p>
<p>
    {
</p>
<p>
    &nbsp; &nbsp;int a,b,c;
</p>
<p>
    &nbsp; &nbsp;float s,area;
</p>
<p>
    &nbsp; &nbsp;rintf(“请输入三条边长：”）；
</p>
<p>
    &nbsp; &nbsp;scanf(“%d,%d,%d”,&amp;a,&amp;b,&amp;c); &nbsp; &nbsp;/*从键盘输入待计算的三角形的3边长 */
</p>
<p>
    &nbsp; &nbsp;s=(a+b+c)/2;&nbsp;
</p>
<p>
    &nbsp; &nbsp;area=sqrt(s*(s-a)*(s-b)*(s-c)); &nbsp; &nbsp; &nbsp;/*计算三角形面积 */
</p>
<p>
    &nbsp; &nbsp;printf(“面积：area=%2f\n”,area); &nbsp; /*输出三角形的面积 */
</p>
<p>
    }
</p>
<p>
    2.选择结构（IF…ELSE结构）
</p>
<p>
    &nbsp; &nbsp; 选择结构又称分支结构，简单选择结构和多分支选择结构都属于这类基本结构。图2-2虚线框内是一个简单选择结构。根据条件C判断，若成立则执行A中的运算，若不成立则执行B中的运算。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
   
       &nbsp;图2-2 简单选择结构&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T2-2.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; A分支和B分支都有机会被执行到，但对于一次具体的执行，只能执行其中之一，不可能既执行A，又执行B。
</p>
<p>
    例如：
</p>
<p>
    void main( )&nbsp;
</p>
<p>
    {
</p>
<p>
    &nbsp; &nbsp; &nbsp;float x;
</p>
<p>
    &nbsp; &nbsp; &nbsp;printf(&quot;enter x:&quot;);
</p>
<p>
    &nbsp; &nbsp; &nbsp;scanf(&quot;%f&quot;,&amp;x); /*从键盘输入待判断的变量x */
</p>
<p>
    &nbsp; &nbsp; &nbsp;if (x==0) /*判断变量x的值是否等于0 */
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;\nx值为0\n&quot;);;
</p>
<p>
    &nbsp; &nbsp; &nbsp;else&nbsp;
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;\nx值为非0\n&quot;,x);
</p>
<p>
    }
</p>
<p>
    &nbsp; &nbsp; 当输入x后，对x的值进行判断，如果x等于0，则输出“x值为0”，如果大于或小于0，则输出“x值为非0”。
</p>
<p>
    3.循环结构（WHILE型或UNTIL型结构）
</p>
<p>
    &nbsp; &nbsp; 循环结构又称重复结构，可根据给定条件，判断是否需要重复执行某一部分相同的运算（循环体）。利用循环结构可以大大简化程序的语句，有两类主要的循环结构。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp;
</p>
<p>

    图2-3 两种循环结构&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T2-3.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    （1）当型（WHILE型）循环结构
</p>
<p>
    &nbsp; &nbsp; 如图2-3（a）所示，当型循环结构是先判断条件后执行循环体。当条件C1成立时，执行循环体（A运算），然后再判断条件C1 ，如果仍然成立，再执行A，如此重复，直到条件C1不成立为止，此时不再执行A运算，程序退出循环结构，执行后面的运算。如果第一次判断，条件C1就不成立，循环体A运算将一次也不执行。
</p>
<p>
    例如：
</p>
<p>
    void main()
</p>
<p>
    {
</p>
<p>
    &nbsp; &nbsp;int sum=0,i ;
</p>
<p>
    &nbsp; &nbsp;scanf(“%d”,&amp;i) ;
</p>
<p>
    &nbsp; &nbsp;while (i&lt;=10) { /*循环i的值，判断i是否小于等于3 */
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sum=sum+i ; i++ ; /*循环计算，累加 */
</p>
<p>
    &nbsp; &nbsp; &nbsp;}
</p>
<p>
    &nbsp; &nbsp;printf (&quot;%d\n&quot;,s);
</p>
<p>
    }
</p>
<p>
    &nbsp; &nbsp; 首先判断i是否小于或等于10，如果成立则进行循环体运算，即累加；如果不成立，则跳出循环体，输出结果。
</p>
<p>
    （2）直到型（UNTIL型）循环结构
</p>
<p>
    &nbsp; &nbsp; 如图2-3（b）所示，直到型循环结构是先执行一次循环体（A运算），然后判断条件C2是否成立。如果条件C2不成立，则再执行A，然后再对条件C2作判断，如此重复，直到C2条件成立为止，此时不再执行A运算，程序退出循环结构，执行后面的运算。直到型循环结构，无论给定的判断条件成立与否，循环体（A运算）至少执行了一次。
</p>
<p>
    例如：
</p>
<p>
    void main( )
</p>
<p>
    {
</p>
<p>
    &nbsp; &nbsp; int sum=0,i ;
</p>
<p>
    &nbsp; &nbsp; scanf(“%d”,&amp;i) ;
</p>
<p>
    &nbsp; &nbsp; do {
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sum=sum+i ; i++ ; /*循环计算，累加 */
</p>
<p>
    &nbsp; &nbsp; &nbsp;}while (i&lt;=10) ; /*循环i的值，判断i是否小于等于3 */
</p>
<p>
    &nbsp; &nbsp; &nbsp; printf(%d”,sum) ;&nbsp;
</p>
<p>
    &nbsp;}
</p>
<p>
    &nbsp; &nbsp; 首先无条件顺序执行循环体运算，即累加，然后判断k是否小于或等于3，如果成立则继续执行循环体部分；如果不成立，则结束循环，输出结果。
</p>
<p>
    以上两个例题中，当i值小于或等于10时，二者结果相同，而当i&gt;10时，二者结果不同。因为此时对while循环，不执行循环，而对do—while循环，要执行一次循环体。
</p>
<p>
    &nbsp; 说明：遵循结构化程序的设计原则，不仅在设计过程中提高了编程工作的效率，降低了软件开发成本；而且按结构化程序设计方法设计出的程序更易于理解、使用和维护。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    2.2.3 结构化程序设计的注意事项
</p>
<p>
    在结构化程序设计的具体实施中，要注意把握以下要素：
</p>
<p>
    &nbsp; （1）使用顺序、选择、循环等有限的控制结构表示程序的控制逻辑。
</p>
<p>
    &nbsp; （2）选用的控制结构只允许有一个入口和一个出口。
</p>
<p>
    &nbsp; （3）程序语句组成容易识别的功能模块，每个模块只有一个入口和一个出口。
</p>
<p>
    &nbsp; （4）复杂结构应该用嵌套的基本控制结构进行组合嵌套来实现。
</p>
<p>
    &nbsp; （5）语言中没有的控制结构，应该采用前后一致的方法来模拟。
</p>
<p>
    &nbsp; （6）严格控制goto语句的使用。
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p style="text-align: center;">
    <strong>2.3 面向对象的程序设计</strong>
</p>
<p>
    2.3.1 面向对象方法的优点
</p>
<p>
    面向对象方法历经了30多年的研究和发展，已经日益成熟和完善，应用也越来越深入和广泛，现其已经发展为主流的软件开发方法。
</p>
<p>
    &nbsp; &nbsp; 本节主要介绍面向对象方法的优点以及它的一些基本概念。
</p>
<p>
    2.3.1面向对象方法的优点
</p>
<p>
    &nbsp; （1）与人类习惯的思维方法一致。
</p>
<p>
    &nbsp; &nbsp; 长期以来，人与计算机之间仍存在着较大的隔阂，人认识问题时的认识空间和计算机处理问题时的方法空间的不一致，而面向对象技术有助于减小这一隔阂、并使这两个空间尽量趋于一致。
</p>
<p>
    &nbsp; （2）稳定性好。
</p>
<p>
    &nbsp; &nbsp; 以object模拟实体，需求变化不会引起结构的整体变化，因为实体相对稳定，故系统也相应稳定。
</p>
<p>
    &nbsp; （3）可重用性好。
</p>
<p>
    &nbsp; &nbsp; 主要表现在，面向对象程序设计中类库的使用（可重用的标准化的模块），以及类的继承性。
</p>
<p>
    &nbsp; （4）容易开发大型软件产品。
</p>
<p>
    &nbsp; &nbsp; 用面向对象思想开发软件，可以把一个大型产品看作是一系列本质上相互独立的的小产品来处理。
</p>
<p>
    &nbsp; （5）可维护性好。
</p>
<p>
    &nbsp; &nbsp; 采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。
</p>
<p>
    <br/>
</p>
<p>
    2.3.2 面向对象方法的基本概念
</p>
<p>
    面向对象方法的本质，就是主张从客观世界固有的事物出发的构造系统，提倡用人类在现实生活中常用的思维方法来认识、理解和描述客观事物。
</p>
<p>
    &nbsp; &nbsp; 关于面向对象方法，对其概念有许多不同的看法和定义，但是都涵盖对象及对象属性与方法、类、继承、多态性几个基本要素。
</p>
<p>
    &nbsp; &nbsp; 下面分别介绍面向对象方法中这几个重要的基本概念。
</p>
<p>
    1.对象（Object）
</p>
<p>
    （1）对象的概念
</p>
<p>
    &nbsp; &nbsp; 对象是面向对象方法中最基本的概念。对象可以用来表示客观世界中的任何实体，它既可以是具体的物理实体的抽象，也可以是人为的概念，或者是任何有明确边界和意义的东西。
</p>
<p>
    &nbsp; &nbsp; 我们周围的世界是由各式各样的对象组成：例如学校中，学生、教师、课程、班级、教室、计算机、电视机、空调等都是对象。 对象可以是人，可以是物，可以是具体的事物，也可以是抽象的概念。
</p>
<p>
    （2）对象的组成
</p>
<p>
    &nbsp; &nbsp; 面向对象的程序设计方法中涉及的对象是系统中用来描述客观事物的一个实体，是构成系统的一个基本单位，它由一组静态特征和它可执行的一组操作组成。
</p>
<p>
    &nbsp; &nbsp; 客观世界中的实体通常都既具有静态的属性，又具有动态的行为，因此面向对象方法中的对象是由该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。
</p>
<p>
    &nbsp; &nbsp; 例如，一辆汽车是一个对象，它包含了汽车的属性（如颜色、型号等）及其操作（如启动、刹车等）。
</p>
<p>
    &nbsp; &nbsp; 属性即对象所包含的信息，它在设计对象时确定，一般只能通过执行对象的操作来改变。对象可以做的操作表示它的动态行为，在面向对象分析和面向对象设计中，通常把对象的操作称为方法或服务。
</p>
<p>
    &nbsp; &nbsp; 不同对象的同一属性可以具有不同的属性值。
</p>
<p>
    &nbsp; &nbsp; 例如，身高这一属性可以有不同的属性值：张三的身高为170cm，李四的身高为180cm。
</p>
<p>
    （3）对象的基本特点
</p>
<p>
    &nbsp; &nbsp; 对象有以下五大基本特点：
</p>
<p>
    &nbsp; &nbsp;①标识唯一性。一个对象通常可由对象名、属性和操作三部分组成，对象名唯一标识一个对象。
</p>
<p>
    &nbsp; &nbsp;②分类性。指可以将具有相同属性和操作的对象抽象成类。
</p>
<p>
    &nbsp; &nbsp;③多态性。指同一个操作可以是不同对象的行为，不同对象执行同一操作产生不同的结果。
</p>
<p>
    &nbsp; &nbsp;④封装性。从外面看只能看到对象的外部特性，对象的内部对外是不可见的。
</p>
<p>
    &nbsp; &nbsp;⑤模块独立性好。由于完成对象功能所需的元素都被封装在对象内部，所以模块独立性好。
</p>
<p>
    2.类（Class）和实例（Instance）
</p>
<p>
    &nbsp; &nbsp; 类，具有共同属性、共同方法的对象的集合，是关于对象的抽象描述，反映属于该对象类型的所有对象的性质。
</p>
<p>
    &nbsp; &nbsp; 实例，一个具体对象则是其对应类的一个实例。
</p>
<p>
    &nbsp; &nbsp; 要注意的是：“实例”这个术语，必然是指一个具体的对象。“对象”这个术语，则既可以指一个具体的对象，也可以泛指一般的对象。因此，在使用“实例”这个术语的地方，都可以用“对象”来代替，而使用“对象”这个术语的地方，则不一定能用“实例”来代替。
</p>
<p>
    &nbsp; &nbsp; 例如，如图“汽车类”，它描述了所有汽车共有的属性（品牌、价格和最高时速）。因此，任何汽车，不管是卡车、轿车还是面包车，都是类“汽车”的一个对象（这里的“对象”不可以用“实例”来代替），而某一具体的汽车，例如“福特 15万 200km/h”具有这些属性的这辆汽车是类“汽车”的一个实例。
</p>
<p>
    &nbsp; &nbsp; 类是关于对象性质的描述，它同对象一样，包括一组数据属性和在数据上的一组合法操作。
</p>
<p>
    &nbsp; &nbsp; 例如，一个面向对象的图形程序在屏幕中间显示一个半径为4cm的黄颜色的圆，在屏幕右上角显示一个半径为3cm蓝颜色的圆。
</p>
<p>
    &nbsp; &nbsp; 这两个圆心位置、半径大小和颜色均不相同的圆，是两个不同的对象。但是它们都有相同的属性（圆心坐标、半径、颜色）和相同的操作（放大缩小半径等），因此，它们是同一类事物，可以用“Circle类”来定义。
</p>
<p>
    3.消息（Message）
</p>
<p>
    &nbsp; &nbsp; 面向对象的世界是通过对象与对象间彼此的相互合作来推动的，对象间的这种相互合作需要一个机制协助进行，这样的机制称为“消息”。消息传递是对象间通信的手段，一个对象通过向另一对象发送消息来请求其服务。
</p>
<p>
    &nbsp; &nbsp; 消息机制统一了数据流和控制流。消息的使用类似于函数调用。通常一个消息由下述3部分组成：
</p>
<p>
    （1）接收消息的对象名称；
</p>
<p>
    （2）消息选择符（也称为消息名）；
</p>
<p>
    （3）零个或多个参数。
</p>
<p>
    &nbsp; &nbsp; 例如，SolidlLine是Line 类的一个实例（对象），端点1的坐标为（100，200），端点2的坐标为（150，150），当要求它以蓝色、实线型在屏幕上显示时，在C++语言中应该向它发送下列消息：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SolidlLine.Show（blue，Solid）；
</p>
<p>
    &nbsp; &nbsp; 其中：SolidlLine是接收消息的对象名称；Show是消息选择符（即消息名）；小括号内的blue，Solid是消息的参数。
</p>
<p>
    &nbsp; &nbsp; 消息只告诉接收对象需要完成什么操作，但并不指示怎样完成操作。消息完全由接收者解释，独立决定采用什么方法来完成所需的操作。
</p>
<p>
    &nbsp; &nbsp; 一个对象可以接收不同形式和内容的多个消息；相同形式的消息可以送往不同的对象，不同的对象对于形式相同的消息可以有不同的解释，能够作出不同的反应。一个对象可以同时往多个对象传递消息，多个对象也可以同时向某一个对象传递消息。消息传递如图2.4所示。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
	 图2-4消息传递示意图&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T2-4.jpg" style="width:100%;border-radius: 10px;">
   
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    4.继承（Inheritance）
</p>
<p>
    （1）类的继承
</p>
<p>
    &nbsp; &nbsp; 广义地说，继承是指能够直接获得已有的性质和特征，而不必重复地定义它们。
</p>
<p>
    &nbsp; &nbsp; 面向对象软件技术的许多强有力的功能和突出的优点，都来源于把类组成一个层次结构的系统：一个类的上层可以有父类，下层可以有子类。这种层次结构系统的一个重要性质是继承性，一个子类直接继承其父类的描述（数据和操作）或特性，这些属性和操作在子类中不必定义，此外，子类还可以定义它自己的属性和操 作。
</p>
<p>
    &nbsp; &nbsp; 例如，“汽车”类是“卡车”类、“轿车”类和“面包车”类的父类，“汽车”类可以有“品牌”、“价格”和“最高时速”等属性，有“刹车”和“启动”等操作。而“卡车”类除了继承“汽车”类的属性和操作外，还可定义自己的属性和操作，如“载重量”、“最大宽度”和“最大高度”等属性，也可以有“驱动方式”等操作。继承机制如图2-5所示。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
   
     图2-5 汽车类的继承层次关系图&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T2-5.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    （2）继承的传递性
</p>
<p>
    &nbsp; &nbsp; 继承具有传递性，如果类Z继承类Y，类Y继承类X，则类Z继承类X。因此，一个类实际上继承了它上层全部基类的特性，也就是说，属于某类的对象除了具有该类定义的特性外，还具有该类上层全部基类定义的特性。
</p>
<p>
    &nbsp; &nbsp; 继承分为单继承和多重继承。单继承是指一个子类只有唯一的一个父类；多重继承是指一个子类也可以有多个父类，它可以从多个父类中继承特性。
</p>
<p>
    例如，“水陆两用交通工具”类既继承“陆上交通工具”类的特性，又继承“水上交通工具”类的特性。
</p>
<p>
    （3）继承的优点
</p>
<p>
    &nbsp; &nbsp; 继承的优点是：相似的对象可以共享程序代码和数据结构，从而大大减少了程序中的冗余信息，提高软件的可重用性，便于软件修改维护。另外，继承性使得用户在开发新的应用系统时，不必完全从零开始，可以继承原有的相似系统的功能或者从类库中选取需要的类，再派生出新类以实现所需的功能。
</p>
<p>
    5.多态性（Polymorphism）
</p>
<p>
    &nbsp; &nbsp; 对象根据所接收的消息而做出动作，同样的消息被不同的对象接收时可导致完全不同的行为，该现象称为多态性。
</p>
<p>
    &nbsp; &nbsp; 在面向对象的软件技术中，多态性是指子类对象可以像父类对象那样使用，同样的消息既可以发送给父类对象也可以发送给子类对象。
</p>
<p>
    &nbsp; &nbsp;多态性的出现大大提高了软件的可重用性和可扩充性，比如说类Fruit有子类Apple和子类Pear，在代码中可能需要一个水果（fruit）类，但是具体实例化哪个子类，需要看具体的情况，如果在代码中明确实例化了Apple子类，那么以后如果需要实例化Pear子类，那就需要修改代码，然后再重新编译等，费时费力。有了多态，就可以把想要实现哪个类写在配置文件中，代码永远是：Fruit fruit=Class.forName(&quot;所需要实例化的类名&quot;).getInstance();那个类名可以从配置文件得到，要修改实例化的类，就只要修改配置文件就可以了，就不再需要修改程序代码，更不用重新编译程序了。&nbsp;
</p>
<p>
    <br/>
</p>
</body></html>
