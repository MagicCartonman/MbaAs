<!DOCTYPE html>
<html>
<head>
    <title>排序技术</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style type="text/css">
    body{
        font-family: '楷体'
    }
p{
    text-indent: 20px;
    font-family: '楷体'
}

</style>
</head>
<body style="background:#CDB38B; ">
    <p>
    <br/>
</p>
<h3>
    1.3 线性表及其顺序存储结构
</h3>
<h4>
    1.3.1 线性表的基本概念
</h4>
<p>
    1.线性表的定义
</p>
<p>
    &nbsp; &nbsp; 在数据结构中，线性表（Linear List）是最简单也是最常用的一种数据结构。
</p>
<p>
    &nbsp; &nbsp; 线性表是由n（n≥0）个数据元素a1, a2, …, an组成的有限序列。其中，数据元素的个数n定义为表的长度。当n=0时称为空表，记作( )或，若线性表的名字为L，则非空的线性表（n&gt;0）记作：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; L=（a1，a2，…，an）
</p>
<p>
    &nbsp; &nbsp; 这里ai（i=1，2，…，n）是属于数据对象的元素，通常也称其为线性表中的一个结点。线性表的相邻元素之间存在着前后顺序关系，其中第一个元素无前驱，最后一个元素无后继，其他每个元素有且仅有一个直接前驱和一个直接后继。可见，线性表是一种线性结构。
</p>
<p>
    &nbsp; &nbsp; 例如，英文字母表（A, B, C, …, Z）就是一个长度为26的线性表，表中的每一个英文字母是一个数据元素，四季（春、夏、秋、冬）是一个长度为4的线性表，其中每一个季节是一个数据元素。
</p>
<p>
    &nbsp; &nbsp; 矩阵也是一个线性表，只不过它是一个比较复杂的线性表。在矩阵中，既可以把每一行看成一个数据元素（既每一行向量为一个数据元素），也可以把每一列看成一个数据元素（即每一列向量为一个数据元素）。其中每一个数据元素（一个行向量或者一个列向量）实际上又是一个简单的线性表。
</p>
<p>
    &nbsp; &nbsp; 在复杂的线性表中，一个数据元素由若干数据项组成，此时，把数据元素称为记录（record），而由多个记录构成的线性表又称为文件（file）。例如，一个按照姓名的拼音字母为序排列的通信录就是一个复杂的线性表，见表1-4，表中每个联系人的情况为一个记录，它由姓名、性别、电话号码、电子邮件和住址5个数据项组成。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
   
     <br> <br>
        &nbsp; &nbsp; &nbsp; &nbsp; 表1-4 复杂线性表 <br>
    <img src="file:///android_asset/local_html/local_imgs/B1-4.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    &nbsp;
</p>
<p>
    <br/>
</p>
<p>
    2.非空线性表的特征
</p>
<p>
    非空线性表具有以下一些结构特征：
</p>
<p>
    ●有且只有一个根结点，它无前件；
</p>
<p>
    ●有且只有一个终端结点，它无后件；
</p>
<p>
    ●除根结点与终端结点外，其他所有结点有且只有一个前件，也有且只有一个后件。结点个数n称为线性表的长度，当n=0时，称为空表。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    1.3.2 线性表的顺序存储结构
</p>
<p>
    在计算机中存放线性表，其最简单的方法是顺序存储，也称为顺序分配。
</p>
<p>
    线性表的顺序存储结构具有以下两个基本特征：
</p>
<p>
    ●线性表中所有元素所占的存储空间是连续的；
</p>
<p>
    ●线性表中各数据元素在存储空间中是按逻辑顺序依次存放的。
</p>
<p>
    由此可见，在线性表的顺序存储中，其前、后件两个元素在存储空间中是紧邻的，且前件元素一定存储在后件元素的前面。
</p>
<p>
    在线性表的顺序存储结构中，如果线性表中各数据元素所占的存储空间（字节数）相等，则要在该线性表中查找一个元素是很方便的。
</p>
<p>
    假设线性表中的第一个数据元素的存储地址（指第一个字节的地址，即首地址）为ADR（a1），设每一个数据元素占K个字节，则线性表中第i个数据元素ai在计算机存储空间中的存储地址为
</p>
<p>
    ADR（ai）=ADR（a1）+（i-1）K
</p>
<p>
    即在顺序存储结构中，线性表中每一个数据元素在计算机存储空间中的存储地址由该元素在线性表中的位置序号唯一确定。
</p>
<p>
    一般来说，长度为n的线性表（a1，a2，…，ai，…，an）在计算机中的顺序存储结构如图1-3所示。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    
    <br> <br>
        &nbsp; &nbsp; &nbsp; &nbsp; 图1-3 线性表的顺序存储结构示意图&nbsp;<br>
    <img src="file:///android_asset/local_html/local_imgs/T1-3.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    例如，线性表（14，23，25，78，15，68，27）采用顺序存储结构，每个数据元素占有2个存储单元，第1个数据元素14的存储地址是200，则第3个数据元素25的存储地址是：
</p>
<p>
    ADR（a3）=ADR（a1）+（3-1）×2=200+4=204
</p>
<p>
    从这种表示方法可以看到，它是用元素在计算机内物理位置上的相邻关系来表示元素之间逻辑上的相邻关系。只要确定了首地址，线性表内任意元素的地址都可以方便地计算出来。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    说明：在程序设计语言中，通常定义一个一维数组来表示线性表的顺序存储空间。在用一维数组存放线性表时，该一维数组的长度通常要定义得比线性表的实际长度大一些，以便对线性表进行各种运算，特别是插入运算。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    1.3.3 线性表的插入运算
</p>
<p>
    &nbsp; &nbsp; 本节中的线性表特指使用顺序存储结构的线性表。
</p>
<p>
    &nbsp; &nbsp; 线性表的插入运算是指在表的第i（1≤i≤n+1）个位置上，插入一个新结点x，使长度为n的线性表变成长度为n+1的线性表。
</p>
<p>
    &nbsp; &nbsp; &nbsp;在第i个元素之前插入一个新元素，完成插入操作主要有以下3个步骤。
</p>
<p>
    &nbsp; 步骤1：把原来第n个结点至第i个结点依次往后移一个元素位置。
</p>
<p>
    &nbsp; 步骤2：把新结点放在第i个位置上。
</p>
<p>
    &nbsp; 步骤3：修正线性表的结点个数。
</p>
<p>
    &nbsp; &nbsp; 例如，图1-4（a）表示一个存储空间为10，长度为7的线性表。为了在线性表的第6个元素（即56）之前插入一个值为27的数据元素，则需将第6个和第7个数据元素依次往后移动一个位置，空出第6个元素的位置，如图1-4（a）中箭头所示，然后将新元素27插入到第6个位置。插入一个新元素后，线性表的长度增加1，变为8，如图1-4（b）所示。
</p>
<p>
    &nbsp; &nbsp; 一般情况下，在第i(1≤i≤n）个元素之前插入一个元素时，需将第i个元素之后（包括第i个元素）的所有元素向后移动一个位置。
</p>
<p>
    再例如，在图1-4（b）的线性表的第2个元素之前，再插入一个值为35的新元素，采用同样的步骤：将第2个元素之后的元素（包括第2个元素），即第2个元素至第8个元素，共n-i+1＝8-2+1＝7个元素向后移动一个位置，然后将新元素插入到第2个位置，如图1-4（b）中箭头所示。插入后，线性表的长度增加1，变成9，如图1-4（c）所示。
</p>
<p>
    &nbsp; &nbsp; &nbsp;一般会为线性表开辟一个大于线性表长度的存储空间，如图1-4（a）所示，线性表长度为7，存储空间为10。经过线性表的多次插入运算，可能出现存储空间已满，仍继续插入的错误运算，这类错误称之为“上溢”。
</p>
<p>
    &nbsp; &nbsp; 显然，如果插入运算在线性表的末尾进行，即在第n个元素之后插入新元素，则只要在表的末尾增加一个元素即可，不需要移动线性表中的元素。
</p>
<p>
    &nbsp; &nbsp; 如果要在第1个位置处插入一个新元素，则需要移动表中所有的元素。
</p>
<p>
    线性表的插入运算，其时间主要花费在结点的移动上，所需移动结点的次数不仅与表的长度有关，而且与插入的位置有关。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
     <br> <br>
        &nbsp; &nbsp; &nbsp; &nbsp;  图1-4 线性表的顺序存储结构插入前后的状况&nbsp;<br>
    <img src="file:///android_asset/local_html/local_imgs/T1-4.jpg" style="width:100%;border-radius: 10px;">
  

</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; &nbsp;在平均情况下，要在线性表中插入一个元素，需要移动线性表中一半的数据元素。可见，在线性表中插入一个元素效率是很低的，特别是在线性表中的数据元素比较多的情况下更为突出。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    1.3.4 线性表的删除运算
</p>
<p>
    &nbsp; &nbsp; 本节中的线性表特指使用顺序存储结构的线性表。
</p>
<p>
    &nbsp; &nbsp; 线性表的删除运算，是指将表的第i（1≤i≤n）个结点删除，使长度为n的线性表变成长度为n-1的线性表。
</p>
<p>
    &nbsp; &nbsp; 删除时应将第i+1个元素至第n个元素依次向前移一个元素位置，共移动了n-i个元素，完成删除主要有以下几个步骤。
</p>
<p>
    &nbsp; &nbsp; 步骤1：把第i个元素之后（不包含第i个元素）的n-i个元素依次前移一个位置。
</p>
<p>
    &nbsp; 步骤2：修正线性表的结点个数。
</p>
<p>
    &nbsp; &nbsp; 例如，图1-5（a）为一个长度为8的线性表，将第一个元素45删除的过程为：从第2个元素35开始直到最后一个元素56，将其中的每一个元素均依次往前移动一个位置，如图1-5（a）中箭头所示。此时，线性表的长度减少了1，变成了7，如图1-5（b）所示。
</p>
<p>
    &nbsp; &nbsp; 一般情况下，要删除第i（1≤i≤n）个元素时，则要从第i+1个元素开始，直到第n个元素之间共n-i个元素依次向前移动一个位置。删除结束后，线性表的长度减少1。
</p>
<p>
    &nbsp; &nbsp; 倘若再要删除图1-5（b）中线性表的第3个元素82，则采用同样的步骤：从第4个元素开始至最后一个元素56，将其中的每一个元素均依次往前移动一个位置，如图1-5（b）中箭头所示。此时，线性表的长度减少了1，变成了6，如图1-5（c）所示。
</p>
<p>
    &nbsp; &nbsp; 显然，如果删除运算在线性表的末尾进行，即删除第n个元素，则不需要移动线性表中的元素。
</p>
<p>
    &nbsp; &nbsp; 如果要删除第1个元素，则需要移动表中所有的元素。&nbsp;
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
  
     <br> <br>
        &nbsp; &nbsp; &nbsp; &nbsp;    &nbsp;图1-5线性表的顺序存储结构删除前后的状况&nbsp;<br>
    <img src="file:///android_asset/local_html/local_imgs/T1-5.jpg" style="width:100%;border-radius: 10px;">
</p>
<p>
    <br/>
</p>
<p>
    <br/>
</p>
<p>
    &nbsp; &nbsp; &nbsp;在平均情况下，要在线性表中删除一个元素，需要移动线性表中一半的数据元素。可见，在线性表中删除一个元素效率是很低的，特别是在线性表中的数据元素比较多的情况下更为突出。&nbsp;
</p>
<p>
    <br/>
</p>
</body>
</html>