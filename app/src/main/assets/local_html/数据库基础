<!DOCTYPE html>
<html>
<head>
	<title>算法</title>
	<meta charset="utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>

</head>
<body style="background:#CDB38B; ">

<p>
    第4章 数据库设计基础
</p>

<p style="text-align: center;">
    <strong>4.1 数据库系统的基本概念</strong>
</p>
<p>
    4.1.1 数据库、数据库管理系统、数据库系统
</p>
<p>
    随着计算机科学与技术的发展，数据库技术在计算机应用领域扮演着越来越重要的较色，如今，数据处理约占计算机应用的三大领域（科学计算、数据处理和过程控制）的70%，而数据库技术就是作为一门数据处理技术发展起来的。本节主要讲解数据库系统的基本概念、特点、内部体系结构及其发展历程。
</p>
<p>
    1.数据
</p>
<p>
    &nbsp; &nbsp; 数据（data）是指描述事物的符号记录。描述事物的符号可以是数字，也可以是文字、声音、图形、图像等，数据有多种表现形式。
</p>
<p>
    &nbsp; &nbsp; 计算机中的数据一般分为两部分，其中一部分数据对系统起着长期且持久的作用，它们称为持久性数据；而另一部分数据与程序只有短时间的交互关系，随着程序的结束而消亡，它们称为临时性数据，这类数据通常存放在计算机的内存中。在数据库系统中处理的是持久性数据。软件中的数据具有一定的结构，有型（Type）与值（Value）两个概念。
</p>
<p>
    &nbsp; &nbsp; “型”就是数据的类型，如整型、实型、字符型等。
</p>
<p>
    &nbsp; &nbsp; “值”给出符合给定型的值，如整型值20，实型值2.35，字符型值“I”等。
</p>
<p>
    2.数据库
</p>
<p>
    &nbsp; &nbsp; 数据库（DataBase简称DB）是数据的集合，它具有统一的结构形式并存放于统一的存储介质内，是多种应用数据的集成，并可被各个应用程序所共享。
</p>
<p>
    &nbsp; &nbsp; 数据库存放数据是按数据所提供的数据模式存放的，它能构造复杂的数据结构以建立数据间内在联系与复杂的关系从而构成数据的全局结构模式。
</p>
<p>
    &nbsp; &nbsp; 数据库中的数据具有“集成”、“共享”之特点，即数据库中集成了各种应用的数据，进行统一的构造与存储，而使它们可被不同的应用程序锁使用。
</p>
<p>
    3.数据库管理系统
</p>
<p>
    &nbsp; &nbsp; 数据库管理系统（Database Management System，简称DBMS）是管理数据库的机构，它是一个系统软件，负责数据库中的数据组织、数据操纵、数据维护、控制及保护和数据服务等。
</p>
<p>
    &nbsp; &nbsp; 目前流行的DBMS均为关系数据库系统，例如Oracle、PowerBuilder、DB2和SQL Sever等。另外有些小型的数据库，如Visual FoxPro和Access等。
</p>
<p>
    数据库管理系统是数据库系统的核心，它位于用户与操作系统之间，从软件分类的角度来说，属于系统软件。数据库管理系统的主要功能包括以下几个方面：
</p>
<p>
    &nbsp; （1）数据模式定义。数据库管理系统负责为数据库构建模式，也就是为数据库构建其数据框架。
</p>
<p>
    &nbsp; （2）数据存取的物理构建。数据库管理系统负责为数据模式的物理存取及构建提供有效的存取方法与手段。
</p>
<p>
    &nbsp; （3）数据操纵。数据库管理系统为用户使用数据库中得数据提供方便，它一般提供查询、插入、修改及删除数据的功能。此外，它自身还具有简单算术运算及统计的能力，而且还可以与某些过程性语言结合，使其具有强大的过程性操作能力。
</p>
<p>
    &nbsp; （4）数据完整性、安全性定义与检查。数据库中的数据具有内在语义上的关联性与一致性，它们构成了数据的完整性。数据的完整性是保证数据库中数据正确的必要条件，因此必须经常检查以维护数据的正确。
</p>
<p>
    &nbsp; （5）数据库的并发控制与故障恢复。数据库是一个集成、共享的数据集合体，它能为多个应用程序服务，所以存在多个应用程序对数据库的并发操作。在并发操作中，如果不加控制和管理，多个应用程序间就会相互干扰，从而对数据库中的数据造成破坏。因此，数据库管理系统必须对多个应用程序的并发操作进行必要的控制以保证数据不受破坏，这就是数据库的并发控制。
</p>
<p>
    &nbsp; （6）数据的服务。数据库管理系统提供对数据库中数据的多种服务功能，如数据复制、转存、重组，性能监测、分析等。
</p>
<p>
    &nbsp; &nbsp; DBMS提供了相应的数据语言来实现上述6个功能，下面是几种常见的数据语言：
</p>
<p>
    &nbsp; （1）数据定义语言。该语言负责数据的模式定义与数据的物理存取构建。
</p>
<p>
    &nbsp; （2）数据操纵语言。该语言负责数据的操纵，包括查询与增、删、改等操作。
</p>
<p>
    &nbsp; （3）数据控制语言。该语言负责数据完整性、安全性的定义与检查以及并发控制、故障恢复等功能。
</p>
<p>
    &nbsp; &nbsp; 上述数据语言按其使用方式具两种结构形式。
</p>
<p>
    &nbsp; （1）交互式命令语言：它的语言简单，能在终端上即时操作，它又称为自含型或自主型语言。
</p>
<p>
    &nbsp; （2）宿主型语言：它一般可嵌入某些宿主语言中，如C、C++和COBOL等高级过程性语言中。
</p>
<p>
    4.数据库管理员
</p>
<p>
    &nbsp; &nbsp; 对数据库的规划、设计、维护、监视等进行管理的人员，称为数据库管理员（DataBase Administrator，简称DBA）。
</p>
<p>
    数据库管理员的主要有以下三项工作。
</p>
<p>
    &nbsp; （1）数据库设计：数据库管理员的主要任务之一是做数据库设计，具体地说是进行数据模式的设计。
</p>
<p>
    &nbsp; （2）数据库维护：数据库管理员必须对数据库中的数据安全性、完整性、并发控制及系统恢复、数据定期转存等进行实施与维护。
</p>
<p>
    &nbsp; （3）改善系统性能，提高系统效率：数据库管理员必须随时监视数据库运行状态，不断调整内部结构，使系统保持最佳状态与最高效率。
</p>
<p>
    5.数据库系统
</p>
<p>
    &nbsp; &nbsp; 数据库系统（DataBase System，简称DBS）是指由数据库、数据库管理系统、数据库管理员、系统硬件平台以及系统软件平台构成了一个以数据库管理系统为核心的完整的运行实体。
</p>
<p>
    &nbsp; &nbsp; 在数据库系统中，硬件平台和软件平台所包含的内容和说明如表4-1所示。&nbsp;
</p>


<p>
    表4-1 数据库系统
     <img src="file:///android_asset/local_html/local_imgs/B4-1.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    6.数据库应用系统
</p>
<p>
    &nbsp; &nbsp; 数据库应用系统（DataBase Application System，简称DBAS）是程序员根据用户的需要，在数据库管理系统的支持下，用数据库管理系统提供的命令编写、开发并能够在数据库管理系统的支持下运行的程序和数据库的总称。
</p>
<p>
    &nbsp; &nbsp; &nbsp;在数据库系统的基础上，如果使用数据库管理系统（DBMS）软件和数据库开发工具书写出应用程序，用相关的可视化工具开发出应用界面，则构成了数据库应用系统（Database Application System，简称DBAS）。DBAS由数据库系统、应用软件及应用界面三者组成。
</p>
<p>
    &nbsp; &nbsp; 因此，DBAS包括数据库、数据库管理系统、人员（数据库管理员和用户）、硬件平台、软件平台、应用软件、应用界面7个部分。
</p>
<p>
    &nbsp; &nbsp; 数据库应用系统的层次结构如图4-1所示，其中，将应用软件与应用界面合称为应用系统。&nbsp;
</p>



<p>
    图4-1 数据库应用系统的层次结构&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-1.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; 说明：在数据库系统、数据库管理系统和数据库三者之间，数据库管理系统是数据库系统的组成部分，数据库又是数据库管理系统的管理对象，因此我们可以说数据库系统包括数据库管理系统，数据库管理系统又包括数据库。&nbsp;
</p>

<p>
    4.1.2 数据库技术的发展
</p>
<p>
    数据管理技术的发展经历了3个阶段：人工管理阶段、文件系统阶段和数据库系统阶段。其中数据独立性最高的是数据库系统，数据独立性指的是数据库和应用程序相互独立。
</p>
<p>
    &nbsp; &nbsp; &nbsp;随着计算机应用领域的不断扩张，数据库系统的功能和应用范围也越来越广。数据模型的发展，其可以划分为3个阶段：文件系统阶段、层次数据库与网状数据库系统阶段、关系数据库系统阶段。
</p>
<p>
    &nbsp; &nbsp;（1）文件系统阶段。文件系统是数据库系统发展的初级阶段，它具有提供简单的数据共享与数据管理的能力，但是它缺少提供完整、统一的管理和数据共享的能力。由于它的功能简单，因此它附属于操作系统而不成为独立的软件，还算不上是数据库系统。
</p>
<p>
    &nbsp; &nbsp;（2）层次数据库与网状数据库系统阶段。层次数据库与网状数据库的发展为统一管理与共享数据提供了有力的支撑，但是由于它们脱胎于文件系统，所以这两种系统也存在不足。
</p>
<p>
    &nbsp; &nbsp;（3）关系数据库系统阶段。关系数据库系统结构简单，使用方便，逻辑性强，物理性少，因此在20世纪80年代以后一直占据数据库领域的主导地位。
</p>
<p>
    关于数据管理3个阶段中的软硬件背景及处理特点，简单概括如表4-2所示。&nbsp;
</p>


<p>
    表4-2 &nbsp; &nbsp; 数据管理3个阶段的比较
     <img src="file:///android_asset/local_html/local_imgs/B4-2.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    &nbsp; &nbsp; 一般认为，未来的数据库系统应支持数据管理、对象管理和知识管理，应该具有面向对象的基本特征。在关于数据库的诸多新技术中，下面3种是比较重要的。
</p>
<p>
    &nbsp; （1）面向对象数据库系统
</p>
<p>
    &nbsp; &nbsp; 用面向对象方法构筑面向对象数据模型使其具有比关系数据库系统更为通用的能力。
</p>
<p>
    &nbsp; （2）知识库系统
</p>
<p>
    &nbsp; &nbsp; 用人工智能中的方法特别是用谓词逻辑知识表示方法构筑数据模型，使其模型具有特别通用的能力。
</p>
<p>
    &nbsp; （3）关系数据库系统的扩充
</p>
<p>
    &nbsp; &nbsp; 利用关系数据库作进一步扩展，使其在模型的表达能力与功能上有进一步的加强，如与网络技术相结合的Web数据库、数据仓库及嵌入式数据库等。&nbsp;
</p>

<p>
    4.1.3 数据库系统的基本特点
</p>
<p>
    与人工管理和文件系统相比，数据库管理阶段具有如下特点。
</p>
<p>
    1.数据集成性
</p>
<p>
    &nbsp; &nbsp; 数据库系统的数据集成性主要表现在如下几个方面。
</p>
<p>
    &nbsp; （1）在数据库系统中采用统一的数据结构方式。
</p>
<p>
    &nbsp; （2）在数据库系统中按照多种应用的需要组织全局的统一的数据结构（即数据模式），数据模式不仅可以建立全局的数据结构，还可以建立数据间的语义联系，从而构成一个内在紧密联系的数据整体。
</p>
<p>
    &nbsp; （3）数据库系统中的数据模式是多个应用共同的、全局的数据结构，而每个应用程序调用的数据则是全局结构中的一部分，称为局部结构（即视图），这种全局与局部相结合的结构模式构成了数据库数据集成性的主要特征。
</p>
<p>
    2.数据的共享性高，冗余性低
</p>
<p>
    &nbsp; &nbsp; 由于数据的集成性使得数据可为多个应用所共享。数据的共享自身极大地减少了数据冗余性，不仅减少存储空间，还避免数据的不一致性。所谓的数据一致性是指在系统中同一数据在不同位置的出现应保持相同的值。因此，减少冗余性以避免数据的不同出现是保证系统一致性的基础。
</p>
<p>
    3.数据独立性高
</p>
<p>
    &nbsp; &nbsp; 数据独立性是指数据域程序间的互不依赖性，即数据的逻辑结构、存储结构与存储方式的改变不会影响应用程序，它是数据库中常用的术语。其包括数据的物理独立性和数据的逻辑独立性。
</p>
<p>
    &nbsp; （1）物理独立性。物理独立性是指数据的物理结构的改变，包括存储结构的改变、存储设备的更换、存取方式的改变不会影响数据库的逻辑结构，也不会引起应用程序的改动。
</p>
<p>
    &nbsp; （2）逻辑独立性。逻辑独立性是指数据库的总体逻辑结构的改变，如改变数据模型、增加新的数据结构、修改数据间的联系等，不会导致相应的应用程序的改变。
</p>
<p>
    4.数据统一管理与控制
</p>
<p>
    &nbsp; &nbsp; 数据库系统不仅为数据提供了高度的集成环境，也为数据提供了统一的管理手段，这主要包括以下3个方面。
</p>
<p>
    &nbsp; （1）数据的安全性保护：检查数据库访问者以防止非法访问。
</p>
<p>
    &nbsp; （2）数据的完整性检查：检查数据库中数据的正确性以保证数据的正确。
</p>
<p>
    &nbsp; （3）并发控制：控制多个应用的并发访问所产生的相互干扰以保证其正确性。
</p>

<p>
    4.1.4 数据库系统体系结构
</p>
<p>
    在数据库系统内部具有三级模式及二级映射，其中三级模式分别为概念级模式、内部模式与外部模式；二级映射则分别为概念级到内部级的映射以及外部级到概念级的映射。数据库内部的抽象结构体系就是由这种三级模式和二级映射构成的，如图4-2所示。&nbsp;
</p>



<p>
    图4-2 三级模式、两级映射关系图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-2.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    1.数据库系统的三级模式结构
</p>
<p>
    &nbsp; &nbsp; 数据库系统在其内部分为三级模式，即概念模式、内模式和外模式。
</p>
<p>
    &nbsp; （1）概念模式（Conceptual Schema）也称为模式，是数据库系统中全局数据逻辑结构的描述，全体用户的公共数据视图。
</p>
<p>
    &nbsp; （2）外模式（External Schema）也称子模式或者用户模式，是用户的数据视图，也就是用户所能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。外模式通常是模式的子集，一个数据库可以有多个外模式。
</p>
<p>
    &nbsp; （3）内模式（Internal Schema）又称物理模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。
</p>
<p>
    &nbsp; &nbsp; 模式的三个级别层次反映了模式的三个不同环境以及它们的不同要求，其中内模式处于最底层，它反映了数据在计算机物理结构中的实际存储形式，概念模式处于中层，它反映了设计者的数据全局逻辑要求，而外模式处于最外层，它反映了用户对数据的要求。
</p>
<p>
    说明：一个数据库只有一个概念模式和一个内模式，有多个外模式。
</p>
<p>
    2.数据库系统的两级映射
</p>
<p>
    &nbsp; &nbsp; 数据库系统通过两级映射建立了模式之间的联系与转换，使得概念模式与外模式虽然不具备物理存在，但也能通过映射而获得其实体。并且，两级映射还保证了数据库系统中的数据独立性，即数据的物理组织改变与逻辑概念改变相互独立，使得只要调整映射方式而不必改变映射模式。
</p>
<p>
    数据库系统的两级映射：外模式/概念模式的映射和概念模式/内模式的映射。
</p>
<p>
    &nbsp; （1）外模式-概念模式的映射：概念模式是一个全局模式而外模式是用户的局部模式。一个概念模式中可以定义多个外模式，而每个外模式是概念模式的一个基本视图。外模式到概念模式的映射给出了外模式与概念模式的对应关系，这种映射一般也是由DBMS来实现的。
</p>
<p>
    &nbsp; （2）概念模式-内模式的映射：该映射给出了概念模式中数据的全局逻辑结构到数据的物理存储结构间的对应关系，此种映射一般由DBMS实现。&nbsp;
</p>

<p>
    4.2 数据模型
</p>
<p>
    4.2.1 数据模型的基本概念
</p>
<p>
    数据库中的数据模型可以将现实世界复杂的要求反映到计算机数据库中的物理世界，数据模型是数据库系统的基础，理解数据模型的概念对于学习数据库的理论是至关重要的。所谓模型，是对现实世界特征的模拟和抽象。
</p>
<p>
    &nbsp; &nbsp; 本节主要讲解数据模型的基本概念、E-R模型和关系模型。
</p>
<p>
    1.数据模型的概念
</p>
<p>
    &nbsp; &nbsp; 数据模型将现实世界复杂的要求反映到计算机数据库中的物理世界是一个逐步转化的过程。它由两个阶段组成，即从现实世界到信息世界再到计算机世界。
</p>
<p>
    &nbsp; &nbsp; 从事物的客观特性到计算机里的具体表示，此过程包括了现实世界、信息世界和机器世界3个数据领域。
</p>
<p>
    &nbsp; （1）现实世界。现实世界就是客观存在的各种事物，是用户需求处理的数据来源。
</p>
<p>
    &nbsp; （2）信息世界。通过抽象对现实世界进行数据库级上的描述所构成的逻辑模型。
</p>
<p>
    &nbsp; （3）机器世界。致力于在计算机物理结构上的描述，是现实世界的需求在计算机中的物理实现，而这种实现是通过逻辑模型转化而来的。
</p>
<p>
    &nbsp; &nbsp; 数据模型应满足三方面的要求，即数据模型能够比较真实地模拟现实世界；数据模型能够容易为人所理解；数据模型能够便于在计算机上实现。
</p>
<p>
    2.数据模型的三要素
</p>
<p>
    &nbsp; &nbsp; 一个数据模型应满足以下3个要素：
</p>
<p>
    &nbsp; （1）数据结构
</p>
<p>
    &nbsp; &nbsp; 数据结构是数据模型的核心，是所研究的对象类型的集合，是对系统静态特性的描述。
</p>
<p>
    &nbsp; （2）数据操作
</p>
<p>
    &nbsp; &nbsp; 数据操作是相应数据结构上允许执行的操作及操作规则的集合。数据操作是对数据库系统动态特性的描述。
</p>
<p>
    &nbsp; （3）数据约束
</p>
<p>
    &nbsp; &nbsp; 数据的约束条件是一组完整性规则的集合。数据的正确、有效、相容由该完整性规则来保证。
</p>
<p>
    3.数据模型的类型
</p>
<p>
    &nbsp; &nbsp; 数据模型按照不同的应用层次分为概念数据模型、逻辑数据模型以及物理数据模型。
</p>
<p>
    &nbsp; （1）概念数据模型（Conceptual Data Model）简称概念模型，它是一种面向客观世界、面向用户的模型，它与具体的数据库管理系统和具体的计算机平台无关。概念模型着重于对客观世界复杂事物描述及对它们的内在联系的刻画。目前，最著名的概念模型有E-R模型和面向对象模型。
</p>
<p>
    &nbsp; （2）逻辑数据模型（Logic Data Model）也称数据模型，是面向数据库系统的模型，着重于在数据库系统一级的实现。成熟并大量使用的数据模型有层次模型、网状模型、关系模型和面向对象模型等。
</p>
<p>
    &nbsp; （3）物理数据模型（Physical Data Model）也称物理模型，是面向计算机物理表示的模型，此模型给出了数据模型在计算机上物理结构的表示。
</p>

<p>
    4.2.2 E-R模型
</p>
<p>
    概念模型是面向现实世界的，它将现实世界的要求转化成实体、联系和属性等几个基本概念，以及它们间的基本连接关系，并且可以用E-R图直观形象的展现出来。
</p>
<p>
    1. E-R模型的基本概念
</p>
<p>
    &nbsp; （1）实体
</p>
<p>
    &nbsp; &nbsp; 实体是现实世界的事物抽象而成的，它是概念世界的基本单位，实体客观存在且实体之间是可以相互区别的。凡是有共性的实体可组成一个集合称为实体集。
</p>
<p>
    &nbsp; &nbsp; 实体可以是一个实际的事物，例如，一本数学书、一本英语书等；实体也可以是一个抽象的事件，例如，一场演出、一场比赛等。一本数学书和一本英语书是实体，它们又均是书，从而组成一个实体集。
</p>
<p>
    &nbsp; （2）属性
</p>
<p>
    &nbsp; &nbsp; 现实世界中的事物都有一些特性，我们通常称事物的特性为属性。属性刻画了实体的特征。一个实体通常具有多个属性，每个属性可以有值，一个属性的取值范围称为该属性的值域或值集。
</p>
<p>
    &nbsp; &nbsp; 例如，一个学生可以用学号、姓名、出生年月等属性来描述。
</p>
<p>
    &nbsp; （3）联系
</p>
<p>
    &nbsp; &nbsp; 现实世界中事物间的关联称为联系。在概念世界中联系反映了实体集间的一定关系，生产者与消费者之间的供求关系，上、下级间的领导关系等。
</p>
<p>
    实体间联系的种类是指一个实体型中可能出现的每一个实体和另一个实体型中多少个具体实体存在联系，可归纳为3种类型，如表4-3所示。&nbsp;
</p>


<p>
    表4-3 实体间联系的类型
     <img src="file:///android_asset/local_html/local_imgs/B4-3.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    2 .E-R模型3个基本概念之间的联接关系
</p>
<p>
    &nbsp; &nbsp; E-R模型由实体、联系和属性3个基本概念组成。现实世界是有机联系的整体，为了能表示现实世界，必须把这三者结合起来。
</p>
<p>
    &nbsp; （1）实体（集）与联系的结合
</p>
<p>
    &nbsp; &nbsp;一般来说，实体集之间必须通过联系来建立联接关系。
</p>
<p>
    &nbsp; &nbsp; 例如，教师与学生之间无法建立直接联系，它只能通过“教与学”的联系才能在相互之间建立关系。
</p>
<p>
    &nbsp; 说明：实体和联系的结合是对错综复杂的现实世界的高度的概括和抽象。
</p>
<p>
    &nbsp;（2）实体集（联系）与属性的结合
</p>
<p>
    &nbsp; &nbsp; 实体和联系是概念世界的基本元素，而属性是附属于实体和联系的，它本身并不构成独立的单位。
</p>
<p>
    一个实体可以具有若干个属性，每个属性具有自己的值域，属性在值域内取值。实体以及它的所有属性一起构成该实体的一个完整描述。实体有“型”和“值”之分，一个实体的所有属性构成了这个实体的“型”，而一个实体中所有属性值的集合称为元组，元组构成了这个实体的“值”。
</p>
<p>
    &nbsp; &nbsp; 例如，在表4-4的员工档案表中，实体的型是由工号、姓名、性别、年龄、部门等属性组成，而每一行是一个实体，（3245，张三，男，25，销售部）是一个实体，（3256，李四，男，30，人事部）是另一个实体，表内的所有实体具有相同的型，构成一个实体集。&nbsp;
</p>


<p>
    表4-4 员工档案表
     <img src="file:///android_asset/local_html/local_imgs/B4-4.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    &nbsp; 说明：联系也可以附有属性，例如，供应商和零件两个实体之间有“供应”的联系，该联系具有“供应量”的属性。联系和它的属性构成了联系的一个完整描述。
</p>
<p>
    3 .E-R图
</p>
<p>
    &nbsp; &nbsp; E-R模型可以用一种非常直观的图形来表示，这种图称为E-R图。E-R图提供了表示实体集、属性和联系的方法。
</p>
<p>
    &nbsp; （1）实体集表示法。E-R图用矩形表示实体集，并在矩形内写上实体集的名字，如实体集学生（student）、课程（course），如图4-3（a）所示。
</p>
<p>
    &nbsp; （2）属性表示法。E-R图用椭圆形表示属性，在椭圆形内写上该属性的名称，如学生属性学号（S#）、姓名（Sn）及年龄（Sa），如图4-3（b）所示。
</p>
<p>
    &nbsp; （3）联系表示法。E-R图用菱形表示联系，在菱形内写上联系名，如学生与课程间的联系SC，如图4-3（c）所示。&nbsp;
</p>




<p>
    &nbsp;图4-3 E-R模型3个概念的示意图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-3.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; &nbsp; 3个基本概念分别用3种几何图形表示。它们之间的联接关系也可用图形表示。
</p>
<p>
    &nbsp; （1）实体集（联系）与属性间的联接关系
</p>
<p>
    &nbsp; &nbsp; 属性依附于实体集，因此，它们之间有联接关系。在E-R图中这种关系可用联接这两个图形间的无向线段表示（一般用直线）。
</p>
<p>
    如实体集student有属性S#（学号）、Sn（学生姓名）及Sa（学生年龄）；实体集course有属性C#（课程号）、Cn（课程名）及P#（预修课号），此时它们可用图4-4（a）联接。
</p>
<p>
    &nbsp; &nbsp; 属性也依附于联系，它们之间也有联接关系，因此也可用无向线段表示。如联系SC可与学生的课程成绩属性G建立联接并可用图4-4（b）表示。&nbsp;
</p>



<p>
    图4-4 实体集（联系）与属性间的联接关系图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-4.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; （2）实体集与联系间的联接关系
</p>
<p>
    &nbsp; &nbsp; 在E-R图中，实体集与联系间的联接关系可用联接这两个图形间的无向线段表示。
</p>
<p>
    &nbsp; &nbsp; 如实体集student与联系SC间有联接关系，实体集与course与联系SC间也有联系，因此它们之间可用无向线段相联，为了刻画函数关系，在线段边上注明其对应函数关系，如1∶1，1∶n，n∶m等，构成一个如图4-5所示的图。&nbsp;
</p>



<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;图4-5 实体集间的联系示意图&nbsp;
</p>


<p>
    &nbsp; &nbsp; 实体集间的联系除了上面所示的两个实体集之间的联系外，还包括3个实体集间的联系和3个以上实体集间的联系，其中两个实体集之间的联系叫二元联系，多个实体集之间的联系叫多元联系。&nbsp;
</p>

<p>
    4.2.3 层次模型
</p>
<p>
    1.层次模型的数据结构&nbsp;
</p>

<p>
    &nbsp; &nbsp; 层次模型是指用树形结构表示实体及其之间联系的模型。在层次模型中，节点是实体，树枝是联系，从上到下是一对多的关系。层次模型的基本结构是树形结构，自顶向下、层次分明。
</p>
<p>
    &nbsp; &nbsp; 现实世界中许多实体之间的联系本来就呈现一种很自然的层次关系，如家族关系。家族的祖先就是父结点，向下体现一对多的关系。除祖先外的所有家庭成员都可以看作是上级父结点的子结点，向上有且仅有一个父结点，向下有一个或多个子结点。
</p>
<p>
    &nbsp; &nbsp; 支持层次模型的数据库管理系统称为层次数据库管理系统，其中的数据库称为层次数据库。层次模型有如下两个特点：
</p>
<p>
    &nbsp; （1）有且仅有一个无父结点的根结点，它位于最高的层次，即顶端。
</p>
<p>
    &nbsp; （2）根结点以外的子结点，向上有且仅有一个父结点，向下可以有一个或多个子结点。
</p>
<p>
    &nbsp; &nbsp; &nbsp;层次模型如图4-6所示。&nbsp;
</p>




<p>
    &nbsp;图4-6 层次模型&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-6.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    2.层次模型的数据操作和完整性约束
</p>
<p>
    &nbsp; &nbsp; 层次模型支持的操作主要有查询、插入、删除和更新。在对层次模型进行数据操作时，要满足层析模型的完整性约束条件。进行插入操作时，如果没有相应的双亲结点值就不能插入子女结点值；进行删除操作时，如果删除的结点有子女结点，则相应的子女结点也被同时删除；进行修改操作时，应修改所有相应的记录，以保证数据的一致性。
</p>
<p>
    3.层次模型的缺点
</p>
<p>
    &nbsp; &nbsp; 层析模型的形成很早，所以它受文件系统的影响大，模型受限制多，物理成分复杂，操作与使用均不理想，它不适合表示非层次性联系；层次模型对于插入和删除操作的限制比较多；此外，查询子女结点必须通过双亲结点。&nbsp;
</p>

<p>
    4.2.4 网状模型
</p>
<p>
    网状模型是指用网状结构表示实体及其之间联系的模型。可以说，网状模型是层次模型的扩展，表示多个从属关系的层次结构，呈现一种交叉关系。
</p>
<p>
    &nbsp; &nbsp; 支持网状模型的数据库管理系统称为网状数据库管理系统，其中的数据库称为网状数据库。
</p>
<p>
    &nbsp; &nbsp; 网状模型的特点有：允许一个或多个结点无父结点；一个结点可以有多于一个的父结点。
</p>
<p>
    &nbsp; &nbsp; 网状模型如图4-7所示。
</p>
<p>
    &nbsp; &nbsp; 网状模型上的结点就像是连入到互联网上的计算机一样，可以在任意两个结点之间建立起一条通路。&nbsp;
</p>



<p>
    图4-7 网状模型&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-7.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    4.2.5 关系模型
</p>
<p>
    1.关系模型的数据结构
</p>
<p>
    &nbsp; &nbsp; 关系模型（Relation Model）是目前数据库领域中最常用的数据模型之一。关系模型的数据结构非常单一，在关系模型中，现实世界的实体以及实体间的各种联系均用关系来表示。
</p>
<p>
    &nbsp; &nbsp; 关系模型采用二维表来表示，简称表。二维表由表框架及表的元组组成。表框架由n个命名的属性组成，n称为属性元数。每个属性又一个取值范围，称为值域。表框架对应了关系的模式，即类型的概念。
</p>
<p>
    &nbsp; &nbsp; 表框架中数据按行存放，其中每行数据称为元组，实际上一个元组是由n个元组分量所组成，每个元组分量是表框架中每个属性的投影值。一个表框架可以存放m个元组，m称为表的基数。
</p>
<p>
    &nbsp; &nbsp; 表4-5给出了一个学生关系的二维表实例。&nbsp;
</p>


<p>
    表4-5 学生登记表
     <img src="file:///android_asset/local_html/local_imgs/B4-5.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    &nbsp; &nbsp; 对于一个二维表，其包含以下概念：
</p>
<p>
    &nbsp; （1）属性：二维表中的一列。
</p>
<p>
    &nbsp; （2）值域：每个属性的取值范围。
</p>
<p>
    &nbsp; （3）元组：二维表中的一行，也称为记录。
</p>
<p>
    &nbsp; （4）键（码）：键具有标识元组、建立元组间联系等重要作用。如果表中某个属性值，它可以唯一确定一个元组，如表4-6中的学号，可以唯一确定一个学生，也就成为本关系的主码或主键。除了主键外的其他能唯一标识元组的属性称为候选码或者侯选键。
</p>
<p>
    &nbsp; （5）外键或外码：表A中的某属性集是某表B的键，则称该属性集为A的外键或外码。
</p>
<p>
    表中一定要有键，如果表中所有属性的子集均不是键，则表中属性的全集必为键（称为全键），因此也一定有主键。
</p>
<p>
    关系框架与关系元组构成了一个关系。一个语义相关的关系集合构成一个关系数据库。关系的框架称为关系模式，而语义相关的关系模式集合构成了关系数据库模式。
</p>
<p>
    &nbsp; &nbsp; 关系具有以下7条性质。
</p>
<p>
    &nbsp; （1）元组个数有限性：二维表中元组的个数是有限的。
</p>
<p>
    &nbsp; （2）元组的唯一性：二维表中任意两个元组不能完全相同。
</p>
<p>
    &nbsp; （3）元组的次序无关性：二维表中元组的次序，即行的次序可以任意交换。
</p>
<p>
    &nbsp; （4）元组分量的原子性：二维表中元组的分量是不可分割的基本数据项。
</p>
<p>
    &nbsp; （5）属性名唯一性：二维表中不同的属性要有不同的属性名。
</p>
<p>
    &nbsp; （6）属性的次序无关性：二维表中属性的次序可以任意交换。
</p>
<p>
    &nbsp; （7）分量值域的同一性：二维表属性的分量具有与该属性相同的值域，或者说列是同质的。
</p>
<p>
    2.关系模型的数据操作
</p>
<p>
    &nbsp; &nbsp; 关系模型的数据操作是建立在关系上的数据操作，一般有查询、增加、删除及修改四种操作。
</p>
<p>
    &nbsp;（1）数据查询。用户可以查询关系数据库中的数据，它包括一个关系内的查询以及多个关系间的查询。
</p>
<p>
    &nbsp; &nbsp; ①对一个关系内查询的基本单位是元组分量，其基本过程是先定位后操作。其中，定位包括横向定位与纵向定位两部分，横向定位是指选择满足某些条件的元组（称行选择），纵向定位即是指定关系中的一些属性（称列指定）。定位后即可进行查询操作，就是将定位的数据从关系数据库中取出并放至指定内存。
</p>
<p>
    &nbsp; &nbsp; ②对多个关系间的数据查询则可分为三步：第一步，将多个关系合并成一个关系；第二步，对合并后的一个关系作定位；第三步，操作。其中第二步与第三步为对一个关系的查询，第一步可分解为两个关系的逐步合并，如有3个关系R1、R2、R3，合并过程是先将R1与R2合并成R4，然后再将R4与R3合并成R5。
</p>
<p>
    &nbsp;（2）数据插入。数据插入仅对一个关系而言，在该关系内插入一个或若干个元组。在数据插入中不需要定位，仅需做关系中元组插入操作，因此数据插入只有一个基本操作。
</p>
<p>
    &nbsp;（3）数据删除。数据删除的基本单位是一个关系内的元组，它的功能是将指定关系内的元组删除。它也分为定位与操作两部分，其中定位部分只需要横向定位而无需纵向定位，定位后即执行删除操作。因此删除操作可以分解为一个关系内的元组选择与删除两个基本操作。
</p>
<p>
    &nbsp;（4）数据修改。数据修改是在一个关系中修改指定的元组与属性。数据修改不是一个基本操作，它可以分解为删除需修改的元组以及插入修改后的元组两个基本操作。
</p>
<p>
    3.关系模型的完整性约束
</p>
<p>
    &nbsp; &nbsp; 关系模型中可以有3类完整性约束：实体完整性约束、参照完整性约束和用户定义的完整性约束。其中前两种完整性约束是关系模型必须满足的完整性约束条件。用户定义的完整性约束是用户使用由关系数据库提供的完整性约束语言来设定写出约束条件，运行时由系统自动检查。
</p>
<p>
    &nbsp; （1）实体完整性约束（Entity Integrity Constraint）
</p>
<p>
    该约束要求关系的主键中属性值不能为空值，这是数据库完整性的最基本要求，因为主键是唯一决定元组的，如果为空值则其唯一性就成为不可能的了。
</p>
<p>
    &nbsp; （2）参照完整性约束（Referntial Integrity Constraint）
</p>
<p>
    该约束是关系之间相关联的基本约束，它不允许关系引用不存在的元组：即在关系中的外键要么是所关联关系中实际存在的元组，要么就为空值。
</p>
<p>
    &nbsp; （3）用户定义的完整性约束（User defined Integrity Constraint）
</p>
<p>
    用户定义的完整性约束反映了某一具体应用所涉及的数据必须满足的语义要求，它是用户针对具体数据环境与应用环境而设置的约束。&nbsp;
</p>

<p>
    4.3 关系代数
</p>
<p>
    4.3.1 关系代数的基本操作
</p>
<p>
    关系数据库系统的特点之一是，它是建立在数学理论基础之上的，有很多数学理论可以表示关系模型的数据操作，其中最为著名的是关系代数与关系演算。本节将介绍关于关系数据库的理论——关系代数。
</p>
<p>
    &nbsp; &nbsp; 关系模型有插入、删除、修改和查询四种操作，它们又可以进一步分解6种基本操作。
</p>
<p>
    &nbsp;（1）关系的属性指定。指定一个关系内的某些属性，用它确定关系这个二维表中的列，它主要用于检索和定位。
</p>
<p>
    &nbsp;（2）关系的元祖选择。用一个逻辑表达式给出关系中所满足此表达式的元组，用它确定关系这个二维表的行，它主要用于检索和定位。
</p>
<p>
    &nbsp; &nbsp; 上述两种基本操作可以确定一张二维表内满足一定行、列要求的数据。
</p>
<p>
    &nbsp; （3）两个关系合并。将两个关系合并成一个关系。用此操作可以不断合并，从而可以将若干个关系合成一个关系，以建立多个关系间的检索与定位。
</p>
<p>
    用上述3个操作可以实现多个关系的定位。
</p>
<p>
    &nbsp;（4）关系的查询。在一个关系或多个关系间做查询，查询的结果也为关系。
</p>
<p>
    &nbsp; （5）关系中元组的插入。在关系中增加一些元组，用它完成插入与修改。
</p>
<p>
    &nbsp; （6）关系中元组的删除。在关系中删除一些元组，用它完成删除与修改。&nbsp;
</p>

<p>
    4.3.2 关系代数的基本运算
</p>
<p>
    由于操作是对关系的运算，而关系时有序组的集合，因此，可以将操作看成是集合的运算。
</p>
<p>
    &nbsp; （1）插入。设有关系R需插入若干元组，要插入的元组组成关系R′，则插入可用集合并运算表示为： R∪R′
</p>
<p>
    &nbsp; （2）删除。设有关系R，需要删除一些元组，要删除的元组组成关系R′，则删除可用集合差运算表示为： R－R′
</p>
<p>
    &nbsp; （3）修改。修改关系R内的元组内容可用以下方法实现：
</p>
<p>
    &nbsp; &nbsp; ①设需修改的元组构成关系R′，则先做删除的得：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; R－R′
</p>
<p>
    &nbsp; &nbsp; ②设改后的元组构成关系R′′，此时将其插入即得到结果：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（R－R′）∪R′′
</p>
<p>
    &nbsp; （4）查询。传统的集合运算无法表示查询的三个操作，所以需要引入一些新的运算。
</p>
<p>
    &nbsp; &nbsp; ①投影运算。投影运算是一个一元运算，其操作为：关系R上的投影是从R中选出若干属性列组成新的关系。
</p>
<p>
    &nbsp; &nbsp; 对R关系进行投影运算的结果记为πA（R），其形式定义如下：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;πA（R）= { t ［ A］| t ∈ R}
</p>
<p>
    &nbsp; &nbsp; 其中，A为R中的属性列。
</p>
<p>
    &nbsp; &nbsp; 例如，对关系R中的“系”属性进行投影运算，记为π系（R），得到无重复元组的新关系S，如图4-8所示。&nbsp;
</p>



<p>
    &nbsp;图4-8 投影运算示意图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-8.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    说明：一般情况下，经过投影运算，元组数量不变，属性数量减少。
</p>
<p>
    &nbsp; ②选择运算。投影运算也是一个一元运算，其操作为：在关系R中选择满足给定条件的元组。
</p>
<p>
    &nbsp; &nbsp; 对R关系进行选择运算的结果记为σF（R），其形式定义如下：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; σF（R） = { t | t ∈R且F（t）为真}
</p>
<p>
    &nbsp; &nbsp; 其中，F表示选择条件，它是一个逻辑表达式，取逻辑值“真”或“假”。
</p>
<p>
    &nbsp; &nbsp; 逻辑表达式F由逻辑运算符┐、∧、∨连接各算术表达式组成。算术表达式的基本形式为：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XθY
</p>
<p>
    &nbsp; &nbsp; 其中，θ表示比较运算符&gt;、&lt;、≤、≥、=或≠。X、Y等是属性名，或为常量，或为简单函数；属性名也可以用它的序号来代替。
</p>
<p>
    &nbsp; &nbsp; 例如，在关系R中选择出“系”为“建筑”的学生，表示为σ系=建筑（R），得到新的关系S，如图4-9所示。&nbsp;
</p>



<p>
    &nbsp;图4-9 选择运算示意图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-9.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; 说明：一般情况下，经过选择运算，元组数量减少，属性数量不变。
</p>
<p>
    &nbsp; &nbsp; ③笛卡尔积运算。对于两个关系的合并操作可以用笛卡尔积表示。其操作为：设有n元关系R及m元关系S，它们分别有p、q个元组，则关系R与S经笛卡尔积记为R×S，该关系是一个n＋m元关系，元组个数是p×q由R与S的有序组组合而成。
</p>
<p>
    &nbsp; &nbsp; 关系R和关系S笛卡尔积运算的结果T如图4-10所示。&nbsp;
</p>



<p>
    &nbsp;图4-10 笛卡尔积运算示意图&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-10.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; 说明：因为R×S生成的关系属性名有重复，按照“属性不能重名”的性质，通常把新关系的属性采用“关系名.属性名”的格式。&nbsp;
</p>

<p>
    4.3.3 关系代数的扩充运算
</p>
<p>
    关系代数中除了上述几个最基本的运算外，为操纵方便还需要增添一些运算，这些运算均可由基本运算导出。常用的扩充运算有交、除、连接及自然连接等。
</p>
<p>
    （1）交运算
</p>
<p>
    &nbsp; &nbsp; 交运算是指取两个关系的交集的运算。假设有n元关系R和n元关系S，它们的交仍然是一个n元关系，它由属于关系R且属于关系S的元组组成，并记为R∩S。交运算是传统的集合运算，但不是基本运算，它可由基本运算推导而得：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; R∩S＝R- (R-S)
</p>
<p>
    &nbsp; &nbsp; 对图4-14中的R和S做交运算的结果如图4-11所示。&nbsp;
</p>



<p>
    图4-11 R∩S运算示例&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-11.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    （2）除运算
</p>
<p>
    &nbsp; &nbsp; 如果将笛卡尔积运算看作乘运算的话，那么除运算就是它的逆运算。当S×T＝R时，则必有R÷S=T，T称为R除以S的商。
</p>
<p>
    &nbsp; &nbsp; 除法运算不是基本运算，它可以由基本运算推导而得。设关系R有属性M1，M2，…，Mn ，关系S有属性Mn-s+1，Mn－s+2，…，Mn，此时有：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R÷S =πM1，M2，…，Mn-s(R)-πM1 ，M2 ，…，Mn-s((πM1 ，M2 ，…，Mn-s(R)×S)-R)
</p>
<p>
    &nbsp; &nbsp; 设有关系R、S，如图4-12(a)、(b)所示，求T＝R÷S，结果见图4-12(c)。&nbsp;
</p>



<p>
    图4-12 除运算示例&nbsp;
     <img src="file:///android_asset/local_html/local_imgs/T4-12.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    &nbsp; 说明：由于除是采用的逆运算，因此除运算的执行是需要满足一定条件的。设有关系T、R，T能被除的充分必要条件是：T中的域包含R中的所有属性；T中有一些域不出现在R中。
</p>
<p>
    （3）连接与自然连接运算
</p>
<p>
    &nbsp; &nbsp; 连接运算也称θ连接，是对两个关系进行的运算，其意义是从两个关系的笛卡尔积中选择满足给定属性间一定条件的那些元组。
</p>
<p>
    &nbsp; &nbsp; 设m元关系R和n元关系S，则R和S两个关系的连接运算用公式表示为：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R∞S
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AθB
</p>
<p>
    &nbsp; &nbsp; 它的含义可用下式定义：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R∞S =σAθB（R×S）
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AθB
</p>
<p>
    &nbsp; &nbsp; 其中，A和B分别为R和S上度数相等且可比的属性组。连接运算从关系R和关系S的笛卡尔积R×S中，找出关系R在属性组A上的值与关系S在属性组B上值满足θ关系的所有元组。
</p>
<p>
    &nbsp; &nbsp; 当θ为“＝”时，称为等值连接。
</p>
<p>
    &nbsp; &nbsp; 当θ为“&lt;”时，称为小于连接。
</p>
<p>
    &nbsp; &nbsp; 当θ为“&gt;”时，称为大于连接。
</p>
<p>
    &nbsp; &nbsp; 需要注意的是，在θ连接中，属性A和属性B的属性名可以不同，但是域一定要相同，否则无法比较。
</p>
<p>
    &nbsp; &nbsp; 设有关系R和关系S，如图4-13(a)、(b)所示，对图中的关系R和关系S做连接运算的结果见图4-13(c)、(d)。
</p>
<p>
    &nbsp; &nbsp; 在实际应用中，最常用的连接是一个叫自然连接的特例。两个关系中进行比较的是相同的属性，进行等值连接，相当于θ恒为“＝”，且在结果中还要把重复的属性列去掉，这是连接中一个特例，我们称之为自然连接。自然连接可记为：
</p>
<p>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R∞S
</p>
<p>
    &nbsp; &nbsp; &nbsp;设有关系R和关系S，如图4-14(a)、(b)所示，则R∞S的结果见图4-14（c）。&nbsp;
</p>



<p>
    &nbsp;图4-13 连接运算示例
    <img src="file:///android_asset/local_html/local_imgs/T4-13.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    图4-14 自然连接运算示例&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T4-14.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    4.3.4 关系代数的应用实例
</p>
<p>
    关系代数虽然形式简单，但它已经足以表达对表的查询、插入、删除及修改等要求。查询是这所有的操作中最复杂的操作。下面通过一个例子来体会一下关系代数在查询方面的应用。
</p>
<p>
    &nbsp; &nbsp; 例如，设学生课程数据库中有学生S、课程C和学生选课SC三个关系，关系模式如下：
</p>
<p>
    &nbsp; &nbsp; 学生S（Sno，Sname，Sex，SD，Age）
</p>
<p>
    &nbsp; &nbsp; 课程C（Cno，Cname，Pcno，Credit）
</p>
<p>
    &nbsp; &nbsp; 学生选课SC（Sno，Cno，Grade）
</p>
<p>
    &nbsp; &nbsp; 其中，Sno、Sname、Sex、SD、Age、Cno、Cname、Pcno、Credit、Grade分别代表学号、姓名、性别、所在系、年龄、课程号、课程名、预修课程号、学分和成绩。
</p>
<p>
    &nbsp; &nbsp; &nbsp;写出关系模型S、C和SC中的下述查询表达式：
</p>
<p>
    &nbsp; &nbsp; ①查询选修课程名为“数学”的学生号和学生姓名。
</p>
<p>
    &nbsp; &nbsp; πSno，Sname(σCname=数学(S∞C∞SC))
</p>
<p>
    &nbsp; &nbsp;注意：这是一个涉及三个关系的检索。
</p>
<p>
    &nbsp; &nbsp; ②查询至少选修了课程号为“1”和“3”的学生号。
</p>
<p>
    &nbsp; &nbsp; π1(σ1=4∧2=1∧5=3(SC∞SC))
</p>
<p>
    &nbsp; &nbsp; ③查询选修了“操作系统”或者“数据库”课程的学号和姓名。
</p>
<p>
    &nbsp; &nbsp; πSno，Sname(S∞(σCname=操作系统∨Cname=数据库(SC∞C)))
</p>
<p>
    &nbsp; &nbsp; ④查询选修包括“1024”号学生姓名所学课程的学生学号。
</p>
<p>
    &nbsp; &nbsp; πSno，Cno(SC)÷πCno(σSno=1024(SC))
</p>
<p>
    &nbsp; &nbsp;⑤查询选修了“数据库”课程的学生的学号、姓名及成绩。
</p>
<p>
    &nbsp; &nbsp;πSno，Sname，Grade(σCname=数据库(S∞C∞SC))
</p>
<p>
    &nbsp; &nbsp;⑥查询年龄在18~20之间（含18和20）的女生的学号、姓名及年龄。
</p>
<p>
    &nbsp; &nbsp;πSno，Sname，Age(σAge≤18∧Age≥20(S))
</p>

<p>
    4.4 数据库设计与管理
</p>
<p>
    4.4.1 数据库设计概述
</p>
<p>
    数据库设计是数据应用的核心。本节将重点介绍数据库设计中需求分析、概念设计和逻辑设计3个阶段，并结合实例说明如何进行相关的设计。另外，本节还将简略的介绍数据库管理的内容和数据库管理员的工作。
</p>
<p>
    1.数据库设计的概念
</p>
<p>
    &nbsp; &nbsp; 在数据库应用系统中的一个核心问题就是设计一个能满足用户要求，性能良好的数据库，这就是数据库设计（Database Design）。
</p>
<p>
    &nbsp; &nbsp; 从数据库设计的定义可以看出，数据库设计的基本任务是根据用户对象的信息需求（对数据库的静态要求）、处理需求（对数据库的动态要求）和数据库的支持环境（包括硬件、操作系统与DBMS）设计出数据模式。
</p>
<p>
    2.数据库设计的方法
</p>
<p>
    &nbsp; &nbsp; 数据库设计的方法可以分为两类。
</p>
<p>
    &nbsp; &nbsp;面向数据的方法(Data-Oriented Appoach)：以信息需求为主，兼顾处理需求。
</p>
<p>
    &nbsp; &nbsp;面向过程的方法(Process-Oriented Appoach)：以处理需求为主，兼顾信息需求。
</p>
<p>
    &nbsp; &nbsp;目前这两种方法都有使用，其中，面向数据的方法是主流的设计方法。
</p>
<p>
    3.数据库设计的步骤
</p>
<p>
    &nbsp; &nbsp; 数据库设计目前一般采用生命周期法，即将整个数据库应用系统的开发分解成目标独立的若干阶段。它们分别是：需求分析阶段、概念设计阶段、逻辑设计阶段、物理设计阶段、编码阶段、测试阶段、运行阶段和进一步修改阶段。在数据库设计中采用上面几个阶段中的前4个阶段，并且主要以数据结构与模型的设计为主线，如图4-15所示。&nbsp;
</p>




<p>
    图4-15 数据库设计的4个阶段&nbsp;
    <img src="file:///android_asset/local_html/local_imgs/T4-15.jpg" style="width:100%;border-radius: 10px;">
</p>

<p>
    4.4.2 数据库设计的需求分析
</p>
<p>
    需求分析简单地说就是分析用户的要求，需求分析是设计数据库的起点，需求分析的结果是否准确地反映了用户的实际要求，将直接影响到后面各个阶段的设计，并影响到设计结果是否合理和实用。
</p>
<p>
    &nbsp; &nbsp; 需求分析阶段收集到的基础数据和一组数据流图（DFD）是下一步设计概念结构的基础。
</p>
<p>
    1.需求分析的任务
</p>
<p>
    &nbsp; &nbsp; 需求分析的任务是通过详细调查现实世界要处理的对象（组织、部门、企业等），充分了解原系统工作概况，明确用户的各种需求，然后在此基础上确定新系统的功能。新系统必须充分考虑今后可能的扩充和改变，不能仅仅按当前应用需求来设计数据库。
</p>
<p>
    2.需求分析的方法
</p>
<p>
    &nbsp; &nbsp; 需求分析的方法主要有结构化分析方法和面向对象分析方法。这两种方法本教材在第3章都作了详细介绍，在此对结构化分析方法（Structured Analysis，简称SA方法）作简要的回顾。
</p>
<p>
    &nbsp; &nbsp; SA方法采用自顶向下，逐步分解的方式分析系统。SA方法的常用工具是数据流图和数据字典。数据流图用于表达数据和处理过程的关系。数据字典是对系统中各类数据描述的集合，是进行详细的数据收集和数据分析所获得的主要成果。
</p>
<p>
    &nbsp; &nbsp; 数据字典包括数据项、数据结构、数据流、数据存储和处理过程5个部分，如表4-6所示。&nbsp;
</p>

<p>
    &nbsp;&nbsp;
</p>

<p>
    表4-6 数据字典包括内容
    <img src="file:///android_asset/local_html/local_imgs/B4-6.jpg" style="width:100%;border-radius: 10px;">
</p>


<p>
    4.4.3 概念设计
</p>
<p>
    1.数据库概念设计的方法
</p>
<p>
    &nbsp; &nbsp;数据库概念设计的目的是分析数据间内在的语义关联，在此基础上建立一个数据的抽象模型——概念模型。
</p>
<p>
    &nbsp; &nbsp; 数据库概念设计的方法有以下两种。
</p>
<p>
    &nbsp; （1）集中式模式设计法
</p>
<p>
    &nbsp; &nbsp; 这是一种统一的模式设计方法，它根据需求由一个统一机构或人员设计一个综合的全局模式。设计简单方便，强调统一与一致，适用于小型或并不复杂的单位或部门，而对大型的或语义关联复杂的单位则并不合适。
</p>
<p>
    &nbsp; （2）视图集成设计法
</p>
<p>
    &nbsp; &nbsp; 这种方法是先把系统分为若干个部分，对每个部分做局部模式设计，建立各个部分的视图，然后把各视图合并起来。由于视图设计的分散性形成不一致，在合并各视图时，可能会出现一些冲突，因此，还需对各视图进行修正，最终形成全局模式。
</p>
<p>
    2.数据库概念设计的过程
</p>
<p>
    &nbsp; &nbsp; &nbsp;概念设计最常用的方法就是P.P.S.Chen于1976年提出的实体—联系方法，简称ER方法。它采用ER模型，将现实世界的信息结构统一由实体、属性以及实体之间的联系来描述。它按照“视图集成设计法”分为3个步骤。
</p>
<p>
    &nbsp; 第1步：选择局部应用。
</p>
<p>
    &nbsp; 第2步：视图设计——逐一设计分ER图。
</p>
<p>
    &nbsp; 第3步：视图集成——ER图合并，得到概念模式。
</p>
<p>
    &nbsp; &nbsp; 下面对各个步骤进行详细说明。
</p>
<p>
    &nbsp; （1）选择局部应用
</p>
<p>
    &nbsp; &nbsp; 根据系统的实际情况，选择多层的数据流图中一个适当层次的数据流图，让这组图中每一部分对应一个局部应用，以这一层次的数据流图出发，就能很好的设计一个ER图。
</p>
<p>
    &nbsp; （2）视图设计
</p>
<p>
    &nbsp; &nbsp;视图设计的策略通常有以下3种。
</p>
<p>
    &nbsp; &nbsp; ①自顶向下：首先定义抽象级别高，普遍性强的对象，然后逐步细化。
</p>
<p>
    &nbsp; &nbsp;②自底向上：首先定义具体的对象，逐步抽象，普遍化和一般化，最后形成一个完整的分ER图。
</p>
<p>
    &nbsp; &nbsp;③由内向外：首先确定核心业务的概念结构，然后依次从中心逐步扩充到其他对象。
</p>
<p>
    &nbsp; &nbsp; &nbsp;现实生活中的许多事物，是作为实体还是属性并没有明确的界定，这需要根据具体情况而定，一般应遵循以下2条准则。
</p>
<p>
    &nbsp; &nbsp; 属性不可再分，即属性不再有需要描述的性质，不能有属性的属性；
</p>
<p>
    &nbsp; &nbsp; 属性不能与其他实体发生联系，联系是实体与实体间的联系。
</p>
<p>
    &nbsp; （3）视图集成
</p>
<p>
    &nbsp; &nbsp; 视图集成是将所有的局部视图统一合并成一个完整的数据模式。在进行视图集成时，最重要的工作是解决局部设计中的冲突。在集成过程中由于每个局部图在设计时的不一致性因而会产生矛盾，引起冲突，常见的冲突主要有以下4种。
</p>
<p>
    ●命名冲突：相同意义的属性，在不同的分ER图上有不同的命名，或者名称相同的属性在不同的分ER图中代表着不同的意义。
</p>
<p>
    ●概念冲突：同一概念在一处为实体而在另一处为属性或者联系。
</p>
<p>
    ●域冲突：相同的属性在不同的视图中有不同的域，如学号在某视图中的域为字符串而在另一个视图中为整数。
</p>
<p>
    ●约束冲突：不同的视图可能有不同的约束。
</p>
<p>
    视图经过合并生成的是初步ER图，其中可能存在冗余的数据和冗余的实体间联系。冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护增加困难。因此，对于视图集成后所形成的整体的数据库概念结构还必须进一步验证，确保它能够满足下列条件。
</p>
<p>
    ●整体概念结构内部必须具有一致性，即不能存在互相矛盾的表达。
</p>
<p>
    ●整体概念结构能准确地反映原来的每个视图结构，包括属性、实体及实体间联系。
</p>
<p>
    ●整体概念结构能满足需求分析阶段所确定的所有要求。
</p>
<p>
    ●整体概念结构最终还应该提交给用户，征求用户和有关人员的意见，进行评审、修改和优化，然后把它确定下来，使之作为数据库的概念结构，作为进一步设计数据库的依据。
</p>

<p>
    4.4.4 逻辑设计
</p>
<p>
    1.从E-R图向关系模式转换
</p>
<p>
    &nbsp; &nbsp;采用ER方法得到的全局概念模型是对信息世界的描述，并不适用于计算机处理，为了适合关系数据库系统的处理，必须将ER图转换成关系模式。这就是逻辑设计的主内容。ER图是由实体、属性和联系组成，而关系模式中只有一种元素----关系。通常转换的方法如表4-7所示。&nbsp;
</p>


<p>
    表4-7 &nbsp;E-R模型和关系模式的对照表
    <img src="file:///android_asset/local_html/local_imgs/B4-7.jpg" style="width:100%;border-radius: 10px;">
</p>



<p>
    &nbsp; &nbsp; 关系模式中的命名可以用ER图原有名称，也可另行命名，但是应尽量避免重名，关系数据库管理系统一般只支持有限种数据类型而ER中的属性域则不受此限制，如出现关系数据库管理系统不支持的数据类型时就需要进行类型转换。
</p>
<p>
    &nbsp; &nbsp; E-R图中允许出现非原子属性，但在关系模式中一般不允许出现非原子属性，非原子属性主要有集合型和元组型。如出现此种情况可以进行转换，其转换方法是集合属性纵向展开而元组属性横向展开。
</p>
<p>
    2.关系视图设计
</p>
<p>
    &nbsp; &nbsp;关系视图设计又称外模式设计，也就是用户子模式设计。关系视图是建立在关系模式基础上的直接面向用户的视图（View），目前关系数据库管理系统一般都提供了视图的功能。
</p>
<p>
    &nbsp; &nbsp; 关系视图具有以下几个优点。
</p>
<p>
    &nbsp; &nbsp; ①提供数据逻辑独立性。逻辑模式发生变化时，只需改动关系视图的定义即可，无需修改应用程序，因此，关系视图保证了数据逻辑独立性。
</p>
<p>
    &nbsp; &nbsp; ②能适应用户对数据的不同需求。关系视图可以屏蔽掉用户不需要的数据，而将用户所关心的部分数据呈现出来。
</p>
<p>
    &nbsp; &nbsp;③有一定数据保密功能。关系视图为每个用户划定了访问数据的范围，从而在应用的各用户间起了一定的保密隔离作用。
</p>
<p>
    3.逻辑模式规范化
</p>
<p>
    &nbsp; &nbsp; 在逻辑设计中还需对关系做规范化验证，规范化设计的主要步骤为：
</p>
<p>
    ●确定数据依赖；
</p>
<p>
    ●用关系来表示ER图中每一个实体，每个实体对应一个关系模式；
</p>
<p>
    ●对于实体之间的那些数据依赖进行极小化处理；
</p>
<p>
    ●对于需要进行分解的关系模式可以采用一定的算法进行分解，对产生的各种模式进行评价，选出较合适的模式。
</p>
<p>
    &nbsp; &nbsp; 此外，还需对逻辑模式做适应RDBMS限制条件的修改。
</p>
<p>
    ●调整性能以减少连接运算；
</p>
<p>
    ●调整关系大小，使每个关系数量保持在合理水平，从而可以提高存取效率；
</p>
<p>
    ●尽量使用快照（Snapshot）。&nbsp;
</p>

<p>
    4.4.5 物理设计
</p>
<p>
    数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于给定的计算机系统。为一个给定的逻辑模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计。数据库物理设计的主要目标是对数据内部物理结构作调整并选择合理的存取路径，以提高数据库访问速度及有效利用存储空间。一般RDBMS中留给用户参与物理设计的内容大致有索引设计、集簇设计和分区设计。
</p>
<p>
    4.4.6 数据库管理
</p>
<p>
    所谓数据库管理（Database Administration），就是数据库中的共享资源进行维护和管理。数据库管理员（Database Administrator，简称DBA）的主要职责是实施数据库管理。
</p>
<p>
    &nbsp; &nbsp; 具体来说，数据库管理的内容包括6个方面。
</p>
<p>
    &nbsp; （1）数据库的建立
</p>
<p>
    &nbsp; &nbsp; 数据库的建立包括数据模式的建立和数据加载。DBA利用RDBMS中的DDL语言申请空间资源，定义数据库名，定义表及其属性，定义视图，定义主关键字、索引、完整性约束等。在数据模式定义后，DBA编制加载程序将外界数据加载至数据模式内，完成数据库的建立。
</p>
<p>
    &nbsp; （2）数据库的调整
</p>
<p>
    &nbsp; &nbsp; 在数据库的调整方面，DBA需要执行的操作有：
</p>
<p>
    &nbsp; ●调整关系模式与视图使之更能适应用户的需求；
</p>
<p>
    &nbsp; ●调整索引与集簇使数据库性能和效率更好；
</p>
<p>
    &nbsp; ●调整分区、数据库缓冲区大小以及并发度使数据库物理性能更好。
</p>
<p>
    &nbsp; （3）数据库的重组
</p>
<p>
    &nbsp; &nbsp; 对数据库进行重新整理，重新调整存储空间的工作称为数据库重组。实际中，一般是先做数据卸载，然后重新加载来达到数据重组的目的。
</p>
<p>
    &nbsp; （4）数据库安全性与完整性控制
</p>
<p>
    &nbsp; &nbsp; 数据库安全性控制需由DBA采取措施予以保证，数据不能受到非法盗用和破坏。数据库的完整性控制可以保证数据的正确性，使录入库内的数据均能保持正确。
</p>
<p>
    &nbsp; （5）数据库的故障恢复
</p>
<p>
    &nbsp; &nbsp; 如果数据库中的数据遭受破坏，RDBMS应该提供故障恢复功能，一般由DBA执行。
</p>
<p>
    &nbsp; （6）数据库监控
</p>
<p>
    &nbsp; &nbsp; DBA必须严密观察数据库的动态变化，数据库监控是进行数据库管理的基础，使得DBA在出现特殊情况(如发生错误和故障)时能及时采取相应的措施。同时，DBA还需监视数据库的性能变化，在必要时对数据库作调整。
</p>


</body></html>
